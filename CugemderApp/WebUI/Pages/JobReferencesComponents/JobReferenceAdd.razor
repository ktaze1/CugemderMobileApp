@page "/jobreferenceadd"

@inject AspNetUsersDAL userDAL
@inject JobReferencesDAL jobReferenceDAL
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime js
@inject NavigationManager uriHelper
@inject NotificationsDAL notifications

@inject UserNotifListDAL userNotifDAL
@using System.ComponentModel.DataAnnotations;

<div>

    <br />
    <h6>Kim Yönlendirilecek:</h6>
    <EditForm Model="ef" OnValidSubmit="ExpertFormAssing">
        <DataAnnotationsValidator />
        <div>
            İsim Soyisim :  <InputText class="form-control" @bind-Value="ef.name" />
            <ValidationMessage For="@(() => ef.name)" />
        </div>
        <div>
            Telefon Numarası:  <InputText class="form-control" @bind-Value="ef.phone" />
            <ValidationMessage For="@(() => ef.phone)" />
        </div>
        @message
        <br />
        <br />
        <button class="btn btn-primary">Kaydet</button>
    </EditForm>


    <br />
    <h6>Kime Yönlendirilecek:</h6>
    <br />
    @if (showFilter)
    {
        <EditForm Model="sc" OnValidSubmit="Filter">
            <div>
                İsim: <InputText class="form-control" @bind-Value="sc.name" />
            </div>

            <div>
                Soyisim: <InputText class="form-control" @bind-Value="sc.surname" />
            </div>

            <br />

            <div style="display: flex; justify-content: flex-end">
                <button class="btn btn-dark"> Filtrele</button>
            </div>
        </EditForm>

        <br />
        @if (tempUserList != null && tempUserList.Count > 0)
        {
            <div class="table-responsive-sm">
                <table class="table table-striped">
                    <thead>
                    <th class="col-8">İsim</th>
                    <th class="col-4">Seç&emsp;</th>
                    </thead>
                    <tbody>


                        @foreach (var item in tempUserList)
                        {
                            <tr>
                                <td>@item.FirstName &nbsp; @item.LastName.ToUpper()</td>
                                <td>
                                    <button class="btn btn-dark" @onclick="@( () => SelectUserForReference(item.Id))" type="button"> &nbsp;Seç&nbsp;&nbsp;</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
    else
    {
        <div>
            <text style="float: left">Seçilen üye:  @referenced.FirstName @referenced.LastName.ToUpper() </text>
            <div style="display: flex; justify-content: flex-end"><button class="btn btn-danger" @onclick="(() => Cancel())">Vazgeç</button></div>
        </div>
        <br />
    }
    <button @onclick="@( () => SendJobReference())" style="margin-left: 0;" class="btn btn-primary" type="button">Yönlendir</button>

    <button @onclick="@( () => uriHelper.NavigateTo("jobreferences"))" style="margin-left: 0;" class="btn btn-danger" type="button">Geri Dön</button>


</div>


<div style="height: 300px; width: 300px;">
    <center>

        <img hidden src="_content/CugemderApp/beeport.png" />
    </center>
</div>



@code {
    AspNetUsers expert, referenced = new AspNetUsers();
    ExpertForm ef = new ExpertForm();
    SearchForm sc = new SearchForm();
    AspNetUsers loggedUser = new AspNetUsers();
    JobReferences jobReference = new JobReferences();
    List<AspNetUsers> users = new List<AspNetUsers>(), tempUserList = new List<AspNetUsers>();
    List<JobReferences> jobReferencesUserReferencer = new List<JobReferences>(), jobReferencesUserReferenced = new List<JobReferences>();
    bool showFilter = true;
    string message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            loggedUser = await userDAL.GetUsername(user.Identity.Name);
            users = await userDAL.GetUsers();
            jobReferencesUserReferenced = await jobReferenceDAL.GetJobReferencesReferenced(loggedUser.Id);
            jobReferencesUserReferencer = await jobReferenceDAL.GetJobReferencesReferencer(loggedUser.Id);
        }
        users = await userDAL.GetUsers();
    }

    public class SearchForm
    {

        public string? name { get; set; }

        public string? surname { get; set; }
    }

    public class ExpertForm
    {

        [Required(ErrorMessage = "Bu alan boş bırakılamaz.")]
        public string name { get; set; }


        [Required(ErrorMessage = "Bu alan boş bırakılamaz.")]
        public string phone { get; set; }
    }

    void ExpertFormAssing()
    {
        jobReference.ExpertName = ef.name;
        jobReference.ExpertContact = ef.phone;
        message = "Kaydedildi.";
    }

    void Cancel()
    {
        showFilter = true;
    }

    async void Filter()
    {
        if (users != null)
        {
            tempUserList = users;
            if (sc.name != null)
                tempUserList = tempUserList.Where(c => c.FirstName.ToLower().Contains(sc.name.ToLower())).ToList();
            if (sc.surname != null)
                tempUserList = tempUserList.Where(c => c.LastName.ToLower().Contains(sc.surname.ToLower())).ToList();
        }
    }

    void SelectUserForReference(string id)
    {
        referenced = users.Where(c => c.Id == id).First();
        jobReference.ReferencedId = id;
        showFilter = false;
    }

    void SendJobReference()
    {
        if (jobReference.ExpertName != null && jobReference.ExpertContact != null && jobReference.ReferencedId != null)
        {
            jobReference.ReferencerId = loggedUser.Id;
            jobReferenceDAL.PostJobReferences(jobReference);
            notifications.SendNotification($"{loggedUser.FirstName} {loggedUser.LastName.ToUpper()} Size Yeni Bir İş/Kişi Yönlendirmiştir.", "İş/Kişi Yönlendirme", referenced.Id);
            userNotifDAL.PostUserNotifications(new UserNotificationList()
            {
                Title = "İş / Kişi Yönlendirme",
                Body = $" {loggedUser.FirstName} {loggedUser.LastName.ToUpper()} İş / Kişi Yönlendirmiştir!.",
                Date = DateTime.Now,
                Receiver = jobReference.ReferencedId
            });


            js.InvokeVoidAsync("swal", "Başarılı", "İş / Kişi Yönlendirildi!", "success");
            RefreshPageContent();
        }
    }

    async void RefreshPageContent()
    {
        System.Threading.Thread.Sleep(100);
        uriHelper.NavigateTo("redirect/jobreferences");
    }

    string getFullname(string id)
    {
        var fullname = users.Where(c => c.Id == id).FirstOrDefault().FirstName + " " + users.Where(c => c.Id == id).FirstOrDefault().LastName;
        return fullname;
    }

}
