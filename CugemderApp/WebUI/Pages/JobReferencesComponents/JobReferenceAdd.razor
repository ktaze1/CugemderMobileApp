@page "/jobreferenceadd"

@inject AspNetUsersDAL userDAL
@inject JobReferencesDAL jobReferenceDAL
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime js
@inject NavigationManager uriHelper

<div>
    <EditForm Model="jobReference">
        <div>
            Kim Yönlendirilecek:  <InputText class="form-control" @bind-Value="jobReference.ExpertName" />
        </div>
        <div>
            Telefon Numarası:  <InputText class="form-control" @bind-Value="jobReference.ExpertContact" />
        </div>
    </EditForm>
    <EditForm Model="sc" OnValidSubmit="Filter">

        <br />
        <h6>Kime Yönlendirilecek:</h6>
        <br />
        <div>
            İsim: <InputText class="form-control" @bind-Value="sc.name" />
        </div>

        <div>
            Soyisim: <InputText class="form-control" @bind-Value="sc.surname" />
        </div>

        <br />
        <button class="btn btn-dark"> Filtrele</button>
    </EditForm>

    <br />
    @if (tempUserList != null && tempUserList.Count > 0)
    {
        <div class="table-responsive-sm">
            <table class="table table-striped">
                <thead>
                <th class="col-8">İsim</th>
                <th class="col-4">Seç&emsp;</th>
                </thead>
                <tbody>


                    @foreach (var item in tempUserList)
                    {
                        <tr>
                            <td>@item.FirstName &nbsp; @item.LastName.ToUpper()</td>
                            <td>
                                <button class="btn btn-dark" @onclick="@( () => SelectUserForReference(item.Id))" type="button"> &nbsp;Seç&nbsp;&nbsp;</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <button @onclick="@( () => SendJobReference())" style="margin-left: 0;" class="btn btn-dark" type="button">Yönlendir</button>

    <button @onclick="@( () => uriHelper.NavigateTo("jobreferences"))" style="margin-left: 0;" class="btn btn-dark" type="button">Geri Dön</button>


</div>


<br />


@code {
    AspNetUsers expert, referenced;
    SearchForm sc = new SearchForm();
    AspNetUsers loggedUser = new AspNetUsers();
    JobReferences jobReference = new JobReferences();
    List<AspNetUsers> users = new List<AspNetUsers>(), tempUserList = new List<AspNetUsers>();
    List<JobReferences> jobReferencesUserReferencer = new List<JobReferences>(), jobReferencesUserReferenced = new List<JobReferences>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            loggedUser = await userDAL.GetUsername(user.Identity.Name);
            users = await userDAL.GetUsers();
            jobReferencesUserReferenced = await jobReferenceDAL.GetJobReferencesReferenced(loggedUser.Id);
            jobReferencesUserReferencer = await jobReferenceDAL.GetJobReferencesReferencer(loggedUser.Id);
        }
        users = await userDAL.GetUsers();
    }

    public class SearchForm
    {
        public string? name { get; set; }

        public string? surname { get; set; }
    }

    async void Filter()
    {
        if (users != null)
        {
            tempUserList = users;
            if (sc.name != null)
                tempUserList = tempUserList.Where(c => c.FirstName.ToLower().Contains(sc.name.ToLower())).ToList();
            if (sc.surname != null)
                tempUserList = tempUserList.Where(c => c.LastName.ToLower().Contains(sc.surname.ToLower())).ToList();
        }
    }

    void SelectUserForReference(string id)
    {
        jobReference.ReferencedId = id;
    }

    void SendJobReference()
    {
        if (jobReference.ExpertName != null && jobReference.ExpertContact != null && jobReference.ReferencedId != null)
        {
            jobReference.ReferencerId = loggedUser.Id;
            jobReferenceDAL.PostJobReferences(jobReference);
        }
    }

    string getFullname(string id)
    {
        var fullname = users.Where(c => c.Id == id).FirstOrDefault().FirstName + " " + users.Where(c => c.Id == id).FirstOrDefault().LastName;
        return fullname;
    }

    async void UpdateStatus(int referenceId)
    {
        uriHelper.NavigateTo($"jobReferenceUpdate/{referenceId}");
    }

    string jobReferenceStatusName(JobReferences reference)
    {
        if (reference.IsMeetingDone)
        {
            if (reference.IsProductive != null && reference.IsProductive.Value)
                return "Görüşme Yapıldı ve Olumlu Geçti";
            else if (reference.IsProductive != null && !reference.IsProductive.Value)
                return "Görüşme Yapıldı Fakat Olumlu Geçmedi";

            return "Görüşme Yapıldı";
        }
        else
            return "Görüşme Yapılmadı";
    }

}
