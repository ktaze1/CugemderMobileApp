@page "/jobreferences"
@inject AspNetUsersDAL userDAL
@inject JobReferencesDAL jobReferenceDAL
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime js
@inject NavigationManager uriHelper

<style>
    p > span {
        font-size: 15px;
    }
</style>

<button class="btn btn-dark" @onclick="@( () => uriHelper.NavigateTo("jobreferenceadd"))">İş Kişi Yönlendir</button>


<hr />

<div class="container">
    <table class="table" style="margin-bottom: 0px">
        <thead class="thead-light">
            <tr class="row">
                <th style="text-align: center" class="col">Gelen Yönlendirmeler</th>
            </tr>
        </thead>
    </table>
    @if (jobReferencesUserReferenced.Count() == 0)
    {
        <p> Kayıt Bulunamadı!</p>
    }
    else
    {
        <table class="table">
            <thead class="thead-light">
                <tr class="row">
                    <th class="col">Detay</th>
                    <th class="d-flex justify-content-end">İşlem &emsp;  &emsp; </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var meeting in jobReferencesUserReferenced.Take(15))
                {
                    <tr class="row">
                        <td class="col-8">
                            <p style="margin-bottom: 0; color: red;"><strong>Referans Eden</strong>:  <span style="color: black;"> @getFullname(meeting.ReferencerId) </span> </p> <span class="br"></span>
                            <p style="margin-bottom: 0; color: red;"><strong>Uzman Kişi</strong>:<span style="color: black;"> @getFullname(meeting.ExpertId) </span></p> <span class="br"></span>
                            <p style="margin-bottom: 0; color: red;"><strong>Durum</strong>: <span style="color: black;"> @jobReferenceStatusName(meeting) </span></p>
                        </td>
                        <td class="col-4">
                            @if (meeting.IsMeetingDone && meeting.IsProductive.HasValue)
                            {

                                <p>&nbsp;</p>
                            }
                            else
                            {
                                <button @onclick="@( () => UpdateStatus(meeting.Id))" class="btn btn-primary" type="button">Cevapla</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }



    <table class="table" style="margin-bottom: 0px">
        <thead class="thead-light">
            <tr class="row">
                <th style="text-align: center" class="col">Yönlendirdiklerim</th>
            </tr>
        </thead>
    </table>
    @if (jobReferencesUserReferencer.Count() == 0)
    {
        <p> Kayıt Bulunamadı!</p>
        <br />
    }
    else
    {
        <table class="table">
            <thead class="thead-light">
                <tr class="row">
                    <th class="col">Detay</th>
                    <th class="d-flex justify-content-end">İşlem &emsp;  &emsp; </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var meeting in jobReferencesUserReferencer.Take(15))
                {
                    <tr class="row">
                        <td class="col-8">
                            <p style="margin-bottom: 0; color: red;"><strong>Referans Edilen Kişi</strong>:  <span style="color: black;"> @getFullname(meeting.ReferencedId) </span></p> <span class="br"></span>
                            <p style="margin-bottom: 0; color: red;"><strong>Uzman Kişi</strong>:<span style="color: black;">  @getFullname(meeting.ExpertId)</span></p> <span class="br"></span>
                            <p style="margin-bottom: 0; color: red;"><strong>Durum</strong>: <span style="color: black;"> @jobReferenceStatusName(meeting)</span></p>
                        </td>
                        <td class="col-4">
                            <p>&nbsp;</p>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    <br />
</div>


@code {

    AspNetUsers expert, referenced;
    SearchForm sc = new SearchForm();
    AspNetUsers loggedUser = new AspNetUsers();
    JobReferences jobReference = new JobReferences();
    List<AspNetUsers> users = new List<AspNetUsers>(), tempUserList = new List<AspNetUsers>();
    List<JobReferences> jobReferencesUserReferencer = new List<JobReferences>(), jobReferencesUserReferenced = new List<JobReferences>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            loggedUser = await userDAL.GetUsername(user.Identity.Name);
            users = await userDAL.GetUsers();
            jobReferencesUserReferenced = await jobReferenceDAL.GetJobReferencesReferenced(loggedUser.Id);
            jobReferencesUserReferencer = await jobReferenceDAL.GetJobReferencesReferencer(loggedUser.Id);
        }
        users = await userDAL.GetUsers();
    }

    public class SearchForm
    {
        public string? name { get; set; }

        public string? surname { get; set; }
    }

    async void Filter()
    {
        if (users != null)
        {
            tempUserList = users;
            if (sc.name != null)
                tempUserList = tempUserList.Where(c => c.FirstName.ToLower().Contains(sc.name.ToLower())).ToList();
            if (sc.surname != null)
                tempUserList = tempUserList.Where(c => c.LastName.ToLower().Contains(sc.surname.ToLower())).ToList();
        }
    }

    void SelectUserForReference(bool option, string id, AspNetUsers user)
    {
        if (option)
        {
            jobReference.ExpertId = id;
            expert = user;
        }
        else
        {
            jobReference.ReferencedId = id;
            referenced = user;
        }
    }

    void SendJobReference()
    {
        if (jobReference.ExpertId != null && jobReference.ReferencedId != null)
        {
            jobReference.ReferencerId = loggedUser.Id;
            jobReferenceDAL.PostJobReferences(jobReference);
        }
    }

    string getFullname(string id)
    {
        var fullname = users.Where(c => c.Id == id).FirstOrDefault().FirstName + " " + users.Where(c => c.Id == id).FirstOrDefault().LastName;
        return fullname;
    }

    async void UpdateStatus(int referenceId)
    {
        uriHelper.NavigateTo($"jobReferenceUpdate/{referenceId}");
    }

    string jobReferenceStatusName(JobReferences reference)
    {
        if (reference.IsMeetingDone)
        {
            if (reference.IsProductive != null && reference.IsProductive.Value)
                return "Görüşme Yapıldı ve Olumlu Geçti";
            else if (reference.IsProductive != null && !reference.IsProductive.Value)
                return "Görüşme Yapıldı Fakat Olumlu Geçmedi";

            return "Görüşme Yapıldı";
        }
        else
            return "Görüşme Yapılmadı";
    }

}
