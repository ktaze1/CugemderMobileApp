@page "/waitinglist"
@inject AspNetUsersDAL userDAL
@inject GroupsDAL groupDAL
@inject PointsDAL pointDAL
@inject NavigationManager  uriHelper
@inject NotificationsDAL notifications
@inject MeetingPointsDAL meetingPointDAL
@inject UserNotifListDAL userNotifDAL

@if (waitingUsers == null)
{
    <p><em>Y&uuml;kleniyor...</em></p>
}
else
{
    <div class="table-responsive-sm">
        <table class="table table-striped" style="margin: 4px;">
            <thead>
                <tr class="d-flex">
                    <th class="col-5">Üye Adı</th>
                    <th class="col-6">Atanacak Grubu</th>
                    <th class="col-1"> &nbsp; </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in waitingUsers)
                {
                    <tr class="d-flex">
                        <td class="col-5">@user.FirstName @user.LastName</td>
                        <td class="col-4">
                            <select class="form-control"
                                    @bind="user.Group">
                                <option value="0">Seç</option>
                                @foreach (var group in groups)
                                {
                                    @if (group.Id == groupId)
                                    {
                                        <option selected value="@group.Id">@group.GroupName</option>
                                    }
                                    else
                                    {
                                        <option value="@group.Id">@group.GroupName</option>
                                    }

                                }
                            </select>
                        </td>
                        <td class="col-3 d-flex justify-content-end">
                            <button class="btn btn-danger" @onclick="@(() => Delete(user.Id))">Sil</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <br />
    <button type="submit" class="btn btn-primary" @onclick="@Update"> Güncelle </button>
}
@code {
    List<AspNetUsers> waitingUsers = new List<AspNetUsers>();
    public int groupId = 0;
    List<Groups> groups = new List<Groups>();
    List<Points> points = new List<Points>();

    protected override async Task OnInitializedAsync()
    {
        waitingUsers = await userDAL.GetUsersNoGroup();
        groups = await groupDAL.GetGroupsAsync();
        points = await pointDAL.GetPoints();


    }

    async void Update()
    {

        List<string> GroupsWithNewUsers = new List<string>();
        foreach (var user in waitingUsers.Where(c => c.Group != null))
        {
            try
            {
                user.EmailConfirmed = true;
                userDAL.PutUser(user.Id, user);
                user.LastGroupName = groups.Where(c => c.Id == user.Group).FirstOrDefault().GroupName;
                user.Points = points.Where(c => c.UserId == user.Id).First().Id;
                userDAL.PutUser(user.Id, user);
                userNotifDAL.PostUserNotifications(new UserNotificationList()
                {
                    Title = "Yeni Üye",
                    Body = $" {user.FirstName} {user.LastName.ToUpper()} Grubunuza Katılmıştır!",
                    Date = DateTime.Now,
                    Receiver = user.GroupNavigation.GroupName
                });


            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message);
            }
            if (!GroupsWithNewUsers.Contains(groups.Where(c => c.Id == user.Group).FirstOrDefault().GroupName))
            {
                GroupsWithNewUsers.Add(groups.Where(c => c.Id == user.Group).FirstOrDefault().GroupName);
            }
        }
        foreach (var item in GroupsWithNewUsers)
        {
           notifications.SendNotification("Grubunuza Yeni Bir Üye Katıldı!", "Yeni Üye", item);
        }
        RefreshPageContent();
    }


    async Task Delete(string userId)
    {
        var user = waitingUsers.First(x => x.Id == userId);
        meetingPointDAL.DeleteMeetinPoints(userId);
        pointDAL.DeletePoints(userId);
        userDAL.DeleteUser(userId);
        RefreshPageContent();
    }


    async void RefreshPageContent()
    {
        waitingUsers = await userDAL.GetUsersNoGroup();
        System.Threading.Thread.Sleep(100);
        uriHelper.NavigateTo("redirect/adminsettings");
        await OnInitializedAsync();
    }
}