@page "/adminjobreferencelist"
@inject AspNetUsersDAL userDAL
@inject JobReferencesDAL jobReferenceDAL
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager uriHelper
@inject IJSRuntime js

@if (jobReferences == null)
{
    <center>
        <img src="_content/CugemderApp/beeport.jpg" style="height: 200px; width: 200px;" />

        <p><em>Y&uuml;kleniyor</em></p>
    </center>
}
else if (jobReferences.Count() == 0)
{
    <p> Kayıt Bulunamadı!</p>
    <br />
}
else
{
    <div class="table-responsive align-content-start" style="padding-left: 1em;">
        <table class="table">
            <thead class="thead-light">
                <tr class="row">
                    <th class="col">Detay</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var meeting in jobReferences)
                {
                    <tr class="row">
                        <td class="col-8">
                            <p style="margin-bottom: 0; color: grey;"><strong>Referans Eden</strong>:   @getFullname(meeting.ReferencerId) </p> <span class="br"></span>
                            <p style="margin-bottom: 0; color: grey;"><strong>Uzman Kişi</strong>: @meeting.ExpertName</p> <span class="br"></span>
                            <p style="margin-bottom: 0; color: grey;"><strong>Durum</strong>:  @jobReferenceStatusName(meeting)</p>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
}

<br />

<button @onclick="@( () => uriHelper.NavigateTo("adminsettings"))" type="button" class="btn btn-secondary">Geri Dön</button>


@code {

    AspNetUsers loggedUser = new AspNetUsers();
    List<AspNetUsers> users = new List<AspNetUsers>(), tempUserList = new List<AspNetUsers>();
    List<JobReferences> jobReferences = new List<JobReferences>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            loggedUser = await userDAL.GetUsername(user.Identity.Name);
            users = await userDAL.GetUsers();
            jobReferences = await jobReferenceDAL.GetJobReferences();
        }
        users = await userDAL.GetUsers();
    }


    string getFullname(string id)
    {
        var fullname = users.Where(c => c.Id == id).FirstOrDefault().FirstName + " " + users.Where(c => c.Id == id).FirstOrDefault().LastName;
        return fullname;
    }


    string jobReferenceStatusName(JobReferences reference)
    {
        if (reference.IsMeetingDone)
        {
            if (reference.IsProductive != null && reference.IsProductive.Value)
                return "Görüşme Yapıldı ve Olumlu Geçti";
            else if (reference.IsProductive != null && !reference.IsProductive.Value)
                return "Görüşme Yapıldı fakat Olumlu Geçmedi";

            return "Görüşme Yapıldı";
        }
        else
            return "Görüşme Yapılmadı";
    }

}