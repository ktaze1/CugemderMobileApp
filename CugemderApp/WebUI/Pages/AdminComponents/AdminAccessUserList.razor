@page "/adminaccessuserlist"
@page "/adminaccessuserlist/{id:int}"


@inject GroupsDAL groupDAL
@inject PointsDAL pointDAL
@inject AspNetUsersDAL userDAL
@inject NavigationManager uriHelper
@inject NotificationsDAL notifications
@inject AuthenticationStateProvider AuthenticationStateProvider



@if (groups == null)
{
    <center>
        <img src="_content/CugemderApp/beeport.png" style="height: 200px; width: 200px;" />

        <p><em>Y&uuml;kleniyor</em></p>
    </center>
}
else
{
    <form @onsubmit="@( () => Navigate(option))">
        <div>
            <select class="form-control" @bind="option">
                <option selected value="0"> Tum Uyeler</option>
                @for (int i = 1; i <= groups.Count; i++)
                {
                    <option value="@groups[i-1].Id">@groups[i - 1].GroupName Grubu</option>
                }
            </select>
            <br />
            <button class="btn btn-info" type="submit">Grup Seç</button>
        </div>
        <br />
    </form>
}

@if (userlist == null)
{
<center>
    <img src="_content/CugemderApp/beeport.jpg" style="height: 200px; width: 200px;" />

    <p><em>Y&uuml;kleniyor</em></p>
</center>
}
else
{
    <br />

    <table class="table">
        <thead>
            <tr>
                <th>Ad Soyad</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @foreach (AspNetUsers user in id.HasValue ? userlist.Where(x => x.Group == id) : userlist)
            {

                <tr>
                    <td>
                        <a href="/profile/@user.Id">@user.FirstName @user.LastName</a>
                    </td>
                    <td>
                        <button class="btn btn-dark" @onclick="@( () => uriHelper.NavigateTo($"adminaccessuser/{user.Id}"))">Hakkında</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}



@code {


    [Parameter] public int? id { get; set; }

    private List<AspNetUsers> userlist = new List<AspNetUsers>();
    private List<Groups> groups = new List<Groups>();
    private List<Points> pointlist = new List<Points>();


    private AspNetUsers loggedUser;


    private int option = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userobj = authState.User;

            if (userobj.Identity.IsAuthenticated)
            {
                loggedUser = await userDAL.GetUsername(userobj.Identity.Name);

            }


            pointlist = await pointDAL.GetPoints();
            groups = await groupDAL.GetGroupsAsync();
            userlist = await userDAL.GetUsersNoNull();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine(ex.Message);
        }
    }

    protected override void OnParametersSet()
    {
        option = id.GetValueOrDefault();
    }


    void Navigate(int option)
    {
        if (option == 0)
            uriHelper.NavigateTo($"/adminaccessuserlist/");
        else
            uriHelper.NavigateTo($"/adminaccessuserlist/{option}");
    }

}
