@page "/adminaccessuserlist"
@page "/adminaccessuserlist/{id:int}"


@inject IJSRuntime js

@using System.Text.Json.Serialization

@inject GroupsDAL groupDAL
@inject PointsDAL pointDAL
@inject AspNetUsersDAL userDAL
@inject NavigationManager uriHelper
@inject NotificationsDAL notifications
@inject MeetingPointsDAL meetingPointDAL
@inject NetworkingMeetingPointDAL networkMeetingDAL
@inject NetworkingActivityPointDAL networkActivityDAL
@inject AuthenticationStateProvider AuthenticationStateProvider


@if (groups == null)
{
    <p><em>Y&uuml;kleniyor...</em></p>
}
else
{
    <form @onsubmit="@( () => Navigate(option))">
        <div>
            <select class="form-control" @bind="option">
                <option selected value="0"> Tum Uyeler</option>
                @for (int i = 1; i <= groups.Count; i++)
                {
                    <option value="@groups[i-1].Id">@groups[i - 1].GroupName Grubu</option>
                }
            </select>
            <br />
            <button class="btn btn-primary" type="submit">Grup Seç</button>
            <button class="btn btn-secondary" type="button" @onclick="@( () => UpdateUserList())">Kullanıcıları Güncelle</button>

            <button type="button" class="btn btn-danger" @onclick="@(() => uriHelper.NavigateTo("adminsettings"))">Geri Dön</button>
        </div>
        <br />
    </form>
}



@if (userlist == null)
{
    <p><em>Y&uuml;kleniyor...</em></p>
}
else
{
    <br />

    <table class="table">
        <thead>
            <tr>
                <th>Ad Soyad</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @foreach (AspNetUsers user in id.HasValue ? userlist.Where(x => x.Group == id) : userlist)
            {

                <tr>
                    <td>
                        <a href="/profile/@user.Id">@user.FirstName @user.LastName.ToUpper()</a>
                    </td>
                    <td>
                        <button class="btn btn-dark" @onclick="@( () => uriHelper.NavigateTo($"adminaccessuser/{user.Id}"))">Düzenle</button>
                        <button @onclick="@( () => Delete(user.Id))" type="button" class="btn btn-danger">
                            Sil
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}



@code {


    [Parameter] public int? id { get; set; }

    private List<AspNetUsers> userlist = new List<AspNetUsers>();
    private List<AspNetUsers> userlistwithNull = new List<AspNetUsers>();
    private List<Groups> groups = new List<Groups>();
    private List<Points> pointlist = new List<Points>();
    private List<NetworkingMeetingPoints> networkingMeetingPoints = new List<NetworkingMeetingPoints>();
    private List<NetworkingActivityPoint> networkingActivityPoints = new List<NetworkingActivityPoint>();

    private string Result { get; set; }

    private AspNetUsers loggedUser;

    JsonResponse responsee = new JsonResponse();

    private int option = 0;

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userobj = authState.User;

        if (userobj.Identity.IsAuthenticated)
        {
            loggedUser = await userDAL.GetUsername(userobj.Identity.Name);

        }


        pointlist = await pointDAL.GetPoints();
        groups = await groupDAL.GetGroupsAsync();
        userlist = await userDAL.GetUsersNoNullUserList();


        networkingActivityPoints = await networkActivityDAL.GetNetworkingActivityPoint();
        networkingMeetingPoints = await networkMeetingDAL.GetNetworkingMeetingPoints();
    }

    protected override void OnParametersSet()
    {
        option = id.GetValueOrDefault();
    }


    void Navigate(int option)
    {
        if (option == 0)
            uriHelper.NavigateTo($"/adminaccessuserlist/");
        else
            uriHelper.NavigateTo($"/adminaccessuserlist/{option}");
    }


    async Task Delete(string userId)
    {
        var boolval = false;

        var modalresponse = await js.InvokeAsync<object>("swal", "Dikkat!", "Kullanıcıyı silmek istediğinizden emin misiniz?", "error",
            new
            {
                buttons =
            new
            {
                cancel = "Hayır",
                accept = "Evet"
            }
            });

        if (modalresponse == null)
        {
            boolval = false;
        }
        else if (modalresponse.GetType().IsValueType)
        {
            boolval = true;
        }

        if (boolval)
        {
            await DeleteUser(userId);
            RefreshPageContent();
        }
        else
        {
            RefreshPageContent();
        }

    }


    async Task DeleteUser(string userId)
    {
        var networkingActivitiesOfUser = networkingActivityPoints.Where(c => c.ReceiverUserId == userId).ToList();
        foreach (var item in networkingActivitiesOfUser)
        {
            networkActivityDAL.DeleteNetworkingActivityPoint(item.Id);
        }
        var networkingMeetingsOfUser = networkingMeetingPoints.Where(c => c.ReceiverUserId == userId).ToList();
        foreach (var item in networkingMeetingsOfUser)
        {
            networkMeetingDAL.DeleteNetworkingMeetingPoints(item.Id);
        }
        meetingPointDAL.DeleteMeetinPoints(userId);
        System.Threading.Thread.Sleep(100);
        await pointDAL.DeletePoints(userId);
        System.Threading.Thread.Sleep(100);
        AspNetUsers user;
        if(userlistwithNull.Count() > 0)
        {
            user = userlistwithNull.Where(c => c.Id == userId).First();
        }
        else
        {

            user = userlist.Where(c => c.Id == userId).First();
        }
        user.Points = null;
        user.Group = null;
        user.Gender = null;
        user.Position = null;
        await userDAL.PutUser(userId, user);
        System.Threading.Thread.Sleep(100);
        await userDAL.DeleteUser(userId);
    }

    public class JsonResponse
    {
        [JsonPropertyName("dismiss")]
        public string Dismiss { get; set; }

        [JsonPropertyName("value")]
        public bool Value { get; set; } = false;
    }


    async void RefreshPageContent()
    {
        userlist = await userDAL.GetUsersNoNullUserList();
        System.Threading.Thread.Sleep(200);
        uriHelper.NavigateTo("redirect/adminaccessuserlist");
        await OnInitializedAsync();
    }

    async void UpdateUserList()
    {

        await js.InvokeVoidAsync("swal", "Dikkat!", "Bu İşlemin Sürmesi Biraz sürebilir. Lütfen \"Güncellendi\" yazısı gelene kadar bekleyin.", "info");

        userlistwithNull = await userDAL.GetUsers();
        List<string> GroupsWithNewUsers = new List<string>();
        var tempList = userlistwithNull.Where(c => c.Points == null).Where(c => c.EmailConfirmed == true).ToList();

        var userswithoutpoints = new List<AspNetUsers>();

        foreach (var user in tempList)
        {
            foreach (var notnulluser in userlist)
            {
                if ((user.Id != notnulluser.Id) && (user.Email == notnulluser.Email))
                {
                    userswithoutpoints.Add(user);
                }
            }

        }

        foreach (var user in userswithoutpoints)
        {
            tempList.Remove(user);
            await DeleteUser(user.Id);
        }



        foreach (var user in tempList)
        {


            if(pointlist.Where(c => c.UserId == user.Id).ToList().Count() == 0)
            {
                await DeleteUser(user.Id);
            }
            else
            {
                user.Points = pointlist.Where(c => c.UserId == user.Id).First().Id;
                await userDAL.PutUser(user.Id, user);

                if (!GroupsWithNewUsers.Contains(groups.Where(c => c.Id == user.Group).FirstOrDefault().GroupName))
                {
                    GroupsWithNewUsers.Add(groups.Where(c => c.Id == user.Group).FirstOrDefault().GroupName);
                }
            }
        }

        foreach (var item in GroupsWithNewUsers)
        {
            notifications.SendNotification("Grubunuza Yeni Bir Üye Katıldı!", "Yeni Üye", item);
        }


        await js.InvokeVoidAsync("swal", "Başarılı!", "Liste Güncellendi.", "success");

        RefreshPageContent();
    }
}
