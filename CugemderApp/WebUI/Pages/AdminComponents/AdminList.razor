@page "/adminlist"
@inject AspNetUsersDAL userDAL
@inject NavigationManager uriHelper


<div>
    <div>
        <EditForm Model="sc" OnValidSubmit="Filter">
            <div>
                İsim: <InputText class="form-control" @bind-Value="sc.name" />
            </div>

            <div>
                Soyisim: <InputText class="form-control" @bind-Value="sc.surname" />
            </div>

            <br />
            <button class="btn btn-dark"> Filtrele</button>

            <button type="button" class="btn btn-danger" @onclick="@(() => uriHelper.NavigateTo("adminsettings"))">Geri Dön</button>
        </EditForm>
    </div>
    <br />

    @if (tempUserList != null)
    {
        <div>
            <table class="table">
                <thead>
                <th class="col-8">İsim</th>
                <th class="col-4">İşlem</th>
                </thead>
                <tbody>

                    @foreach (var item in tempUserList)
                    {
                        <tr>
                            <td>@item.FirstName @item.LastName</td>
                            <td><button class="btn btn-dark" @onclick="@( () => MakeAdmin(item.Id))">Yönetici Yap</button></td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>
@if (users != null)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Yöneticiler</th>
                <th>İşlemler</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var admin in users.Where(c => c.IsAdmin == true))
            {
                <tr>
                    <td>@admin.FirstName @admin.LastName</td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(() => Delete(admin.Id))">Yöneticilikten Çıkar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    List<AspNetUsers> users, tempUserList;

    SearchForm sc = new SearchForm();

    protected override async Task OnInitializedAsync()
    {
        users = await userDAL.GetUsersNoNullUserList();
    }


    async void Delete(string id)
    {
        AspNetUsers user = await userDAL.GetUserID(id);
        user.IsAdmin = false;
        userDAL.PutUser(id, user);
        RefreshPageContent();
    }

    async void MakeAdmin(string id)
    {
        AspNetUsers user = await userDAL.GetUserID(id);
        user.IsAdmin = true;
        userDAL.PutUser(id, user);
        RefreshPageContent();
    }

    public class SearchForm
    {
        public string? name { get; set; }

        public string? surname { get; set; }
    }

    async void Filter()
    {
        if (users != null)
        {
            tempUserList = users;
            if (sc.name != null)
                tempUserList = tempUserList.Where(c => c.FirstName.ToLower().Contains(sc.name.ToLower())).ToList();
            if (sc.surname != null)
                tempUserList = tempUserList.Where(c => c.LastName.ToLower().Contains(sc.surname.ToLower())).ToList();
        }
    }

    async void RefreshPageContent()
    {
        users = await userDAL.GetUsersNoNullUserList();
        System.Threading.Thread.Sleep(100);
        uriHelper.NavigateTo("redirect/adminlist");
        await OnInitializedAsync();
    }
}