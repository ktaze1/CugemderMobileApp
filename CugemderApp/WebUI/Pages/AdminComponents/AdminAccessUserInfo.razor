@page "/adminaccessuser/{id}"

@inject IJSRuntime js

@inject CitiesDAL cityDAL
@inject GroupsDAL groupDAL
@inject FileUpload fileDAL
@inject PointsDAL pointDAL
@inject GendersDAL genderDAL
@inject AspNetUsersDAL userDAL
@inject JobTitlesDAL jobTitleDAL
@inject PositionsDAL positionDAL
@inject NavigationManager uriHelper
@inject RelationshipsDAL relationshipDAL
@inject MeetingPointsDAL meetingPointDAL
@inject NetworkingMeetingPointDAL networkMeetingDAL
@inject NetworkingActivityPointDAL networkActivityDAL
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CugemderApp.Security.CustomStateProvider customStateProvider



@using System.ComponentModel.DataAnnotations

<EditForm Model="@user" OnValidSubmit="@EditUser">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Ad :</label>
        <div>
            <InputText class="form-control" @bind-Value="@user.FirstName" />
            <ValidationMessage For="@(() => user.FirstName)" />
        </div>
    </div>
    <div class="form-group">
        <label>Soyad :</label>
        <div>
            <InputText class="form-control" @bind-Value="@user.LastName" />
            <ValidationMessage For="@(() => user.LastName)" />
        </div>
    </div>
    <div class="form-group">
        <label>Profil Fotoğrafı :</label>
        <div>
            <button class="btn btn-primary" type="button" @onclick="@SelectFiles">Fotoğraf Seç</button>
        </div>
    </div>
    <div class="form-group">
        <label>Mail :</label>
        <div>
            <InputText class="form-control" @bind-Value="@user.Email" />
            <ValidationMessage For="@(() => user.Email)" />
        </div>
    </div>
    <div class="form-group">
        <label>Yeni Şifre Ata :</label>
        <div>
            <em>En az 6 karakter olmalı ve bir adet büyük, bir adet küçük ve bir adet özel karakter içermeli:</em>
            <input type="password" placeholder="Örnek: Password.1" class="form-control" @bind="@newPassword" />
        </div>
    </div>
    <div class="form-group">
        <label>Cinsiyet :</label>
        <div>
            <select class="form-control"
                    @bind="user.Gender">
                <option value="0">---Cinsiyet Seçin---</option>
                @foreach (var gender in genders)
                {
                    @if (gender.Id == genderId)
                    {
                        <option selected value="@gender.Id">@gender.GenderName</option>
                    }
                    else
                    {
                        <option value="@gender.Id">@gender.GenderName</option>
                    }

                }
            </select>
        </div>
    </div>
    <div class="form-group">
        <label>Grup :</label>
        <div>
            <select class="form-control"
                    @bind="user.Group">
                <option value="0">---Grup Seçin---</option>
                @foreach (var group in groups)
                {
                    @if (group.Id == groupId)
                    {
                        <option selected value="@group.Id">@group.GroupName</option>
                    }
                    else
                    {
                        <option value="@group.Id">@group.GroupName</option>
                    }

                }
            </select>
        </div>
    </div>
    <div class="form-group">
        <label>Medeni Hali :</label>
        <div>
            <select class="form-control"
                    @bind="user.Relationship">
                <option value="0">---Medeni Hal Seçin---</option>
                @foreach (var relation in relationships)
                {
                    @if (relation.Id == relationshipId)
                    {
                        <option selected value="@relation.Id">@relation.RelationshipStatus</option>
                    }
                    else
                    {
                        <option value="@relation.Id">@relation.RelationshipStatus</option>
                    }

                }
            </select>
        </div>
    </div>
    <div class="form-group">
        <label>Şehir :</label>
        <div>
            <select class="form-control"
                    @bind="user.LocatedCity">
                <option value="0">---Şehir Seçin---</option>
                @foreach (var city in cities)
                {
                    @if (city.Id == cityId)
                    {
                        <option selected value="@city.Id">@city.CityName</option>
                    }
                    else
                    {
                        <option value="@city.Id">@city.CityName</option>
                    }

                }
            </select>
        </div>
    </div>
    <div class="form-group">
        <label>Doğum Tarihi :</label>
        <div>
            <InputDate class="form-control" @bind-Value="@user.DateOfBirth" />
        </div>
    </div>
    <div class="form-group">
        <label>Pozisyon :</label>
        <div>
            <select class="form-control"
                    @bind="user.Position">
                <option value="0">---Posizyon Secin---</option>
                @foreach (var position in positions)
                {
                    @if (position.Id == positionId)
                    {
                        <option selected value="@position.Id">@position.Position</option>
                    }
                    else
                    {
                        <option value="@position.Id">@position.Position</option>
                    }

                }
            </select>
        </div>
    </div>
    <div class="form-group">
        <label>Telefon :</label>
        <div>
            <InputText class="form-control" @bind-Value="@user.PhoneNumber" />
            <ValidationMessage For="@(() => phoneNo.PhoneNo)" />
        </div>
    </div>
    <div class="form-group">
        <label>Firma :</label>
        <div>
            <InputText class="form-control" @bind-Value="@user.Company" />
            <ValidationMessage For="@(() => user.Company)" />
        </div>
    </div>
    <div class="form-group">
        <label>Meslek :</label>
        <div>
            <select class="form-control"
                    @bind="user.JobTitle">
                <option value="0">---Meslek Secin---</option>
                @foreach (var jobTitle in jobTitles)
                {
                    @if (jobTitle.Id == jobTitleId)
                    {
                        <option selected value="@jobTitle.Id">@jobTitle.TitleName</option>
                    }
                    else
                    {
                        <option value="@jobTitle.Id">@jobTitle.TitleName</option>
                    }

                }
            </select>
        </div>
    </div>
    <div class="form-group">
        <label>Uzmanlık Alanı :</label>
        <div>
            <InputText class="form-control" @bind-Value="@user.Speciality" />
            <ValidationMessage For="@(() => user.Speciality)" />
        </div>
    </div>
    <div class="form-group">
        <label>Hakkında Özet :</label>
        <div>
            <InputTextArea multiline="true" rows="5" class="form-control" @bind-Value="@user.Summary" />
            <ValidationMessage For="@(() => user.Summary)" />
        </div>
    </div>
    <div class="form-group">
        <label>Web Sitesi :</label>
        <div>
            <InputText class="form-control" @bind-Value="@user.Website" />
            <ValidationMessage For="@(() => user.Website)" />
        </div>
    </div>
    <div class="form-group">
        <label>Mezuniyet/Firma Kuruluş Yılı :</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@user.Year" />
            <ValidationMessage For="@(() => user.Year)" />
        </div>
    </div>
    <button type="submit" class="btn btn-primary">
        Güncelle
    </button>

    <button @onclick="@(() => uriHelper.NavigateTo("adminaccessuserlist"))" type="button" class="btn btn-danger">
        Vazgeç
    </button>
</EditForm>


<div style="height: 300px; width: 300px;">
    <center>

        <img hidden src="_content/CugemderApp/beeport.png" />
    </center>
</div>




@code {
    [Parameter] public string id { get; set; }
    private AspNetUsers user = new AspNetUsers();
    private string _userId;

    DateTime time = DateTime.UtcNow;
    private int groupId = 0, positionId = 0, genderId = 0, jobTitleId = 0, relationshipId = 0, cityId = 0;
    private string newPassword;

    private List<Groups> groups = new List<Groups>();
    private List<Cities> cities = new List<Cities>();
    private List<Genders> genders = new List<Genders>();
    private List<Positions> positions = new List<Positions>();
    private List<JobTitles> jobTitles = new List<JobTitles>();
    private List<Relationship> relationships = new List<Relationship>();
    private List<NetworkingMeetingPoints> networkingMeetingPoints = new List<NetworkingMeetingPoints>();
    private List<NetworkingActivityPoint> networkingActivityPoints = new List<NetworkingActivityPoint>();


    private JobTitles selectedTitle;

    FileResult item;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userAuth = authState.User;

        groups = await groupDAL.GetGroupsAsync();
        positions = await positionDAL.GetPositions();
        genders = await genderDAL.GetGenders();
        jobTitles = await jobTitleDAL.GetJobTitles();
        cities = await cityDAL.GetCities();
        relationships = await relationshipDAL.GetRelationships();
        networkingActivityPoints = await networkActivityDAL.GetNetworkingActivityPoint();
        networkingMeetingPoints = await networkMeetingDAL.GetNetworkingMeetingPoints();


        if (userAuth.Identity.IsAuthenticated)
        {
            user = await userDAL.GetUsers(id);
            groupId = user.Group.HasValue ? (int)user.Group : 0;
            genderId = user.Gender.HasValue ? (int)user.Gender : 0;
            positionId = user.Position.HasValue ? (int)user.Position : 0;
            jobTitleId = user.JobTitle.HasValue ? (int)user.JobTitle : 0;
            cityId = user.LocatedCity.HasValue ? (int)user.LocatedCity : 0;
            relationshipId = user.Relationship.HasValue ? (int)user.Relationship : 0;
            UnicodeToEnglish();
        }
    }

    async Task EditUser()
    {
        user.UpdatedAt = DateTime.UtcNow;
        EnglishToTurkish();


        var filetoDelete = System.IO.Path.GetFileName(user.PhotoUrl);
        if (filetoDelete != null && item != null)
        {
            fileDAL.DeletePhoto(filetoDelete);
            System.IO.FileInfo fi = new System.IO.FileInfo(item.FileName);
            string encodedStr = string.Format(@"{0}", Guid.NewGuid());
            var filename = $"{encodedStr}{fi.Extension}";
            var stream = await item.OpenReadAsync();
            var content = new StreamContent(stream);
            var multi = new MultipartFormDataContent();
            multi.Add(content, filename, filename);
            fileDAL.UploadPhoto(multi);
            user.PhotoUrl = $"{AppState._http.BaseAddress.ToString()}StaticFiles/Images/{filename}";
        }

        userDAL.PutUser(user.Id, user);
        if (newPassword != null)
        {
            PasswordChangeModel passwordChange = new PasswordChangeModel();
            passwordChange.id = user.Id;
            passwordChange.newPassword = newPassword;
            await customStateProvider.ResetPassword(passwordChange);
        }

        js.InvokeVoidAsync("swal", "Güncellendi", " ", "success");
        uriHelper.NavigateTo("adminaccessuserlist");
    }

    async Task Delete(string userId)
    {

        if (await js.InvokeAsync<bool>("swal", "Kullanıcıyı silmek istediğinizden emin misiniz?", "", "error"))
        {
            var networkingActivitiesOfUser = networkingActivityPoints.Where(c => c.ReceiverUserId == userId);
            foreach (var item in networkingActivitiesOfUser)
            {
                networkActivityDAL.DeleteNetworkingActivityPoint(item.Id);
            }
            var networkingMeetingsOfUser = networkingMeetingPoints.Where(c => c.ReceiverUserId == userId);
            foreach (var item in networkingMeetingsOfUser)
            {
                networkActivityDAL.DeleteNetworkingActivityPoint(item.Id);
            }
            meetingPointDAL.DeleteMeetinPoints(userId);
            pointDAL.DeletePoints(userId);
            userDAL.DeleteUser(userId);
        }
        else
        {
            RefreshPageContent();
        }

    }

    async void RefreshPageContent()
    {
        user = await userDAL.GetUsers(id);
        System.Threading.Thread.Sleep(200);
        uriHelper.NavigateTo($"redirect/adminaccessuser/{id}");
        await OnInitializedAsync();
    }

    async void SelectFiles()
    {
        item = await FilePicker.PickAsync();
    }

    void EnglishToTurkish()
    {
        if (user.Summary != null)
        {
            user.Summary = user.Summary.Replace("Ç", "&#199;");
            user.Summary = user.Summary.Replace("Ğ", "&#286;");
            user.Summary = user.Summary.Replace("İ", "&#304;");
            user.Summary = user.Summary.Replace("Ö", "&#214;");
            user.Summary = user.Summary.Replace("Ş", "&#350;");
            user.Summary = user.Summary.Replace("Ü", "&#220;");
            user.Summary = user.Summary.Replace("ç", "&#231;");
            user.Summary = user.Summary.Replace("ğ", "&#287;");
            user.Summary = user.Summary.Replace("ı", "&#305;");
            user.Summary = user.Summary.Replace("ö", "&#246;");
            user.Summary = user.Summary.Replace("ş", "&#351;");
            user.Summary = user.Summary.Replace("ü", "&#252;");
        }
    }

    void UnicodeToEnglish()
    {
        if (user.Summary != null)
        {
            user.Summary = user.Summary.Replace("&#199;", "Ç");
            user.Summary = user.Summary.Replace("&#286;", "Ğ");
            user.Summary = user.Summary.Replace("&#304;", "İ");
            user.Summary = user.Summary.Replace("&#214;", "Ö");
            user.Summary = user.Summary.Replace("&#350;", "Ş");
            user.Summary = user.Summary.Replace("&#220;", "Ü");
            user.Summary = user.Summary.Replace("&#231;", "ç");
            user.Summary = user.Summary.Replace("&#287;", "ğ");
            user.Summary = user.Summary.Replace("&#305;", "ı");
            user.Summary = user.Summary.Replace("&#246;", "ö");
            user.Summary = user.Summary.Replace("&#351;", "ş");
            user.Summary = user.Summary.Replace("&#252;", "ü");
        }
    }


    phoneNoValidation phoneNo = new phoneNoValidation();

    public class phoneNoValidation
    {

        [Required(ErrorMessage = "Bu alan boş bırakılamaz.")]
        [RegularExpression(@"^\(?([0-9]{4})\)?[-.●]?([0-9]{3})[-.●]?([0-9]{4})$", ErrorMessage = "Geçerli bir telefon numarası giriniz")]
        [Phone]
        [DataType(DataType.PhoneNumber)]
        public string PhoneNo { get; set; }
    }
}