@page "/networkmeetinguserlist"


@inject GroupsDAL groupDAL
@inject PointsDAL pointDAL
@inject AspNetUsersDAL userDAL
@inject NavigationManager uriHelper
@inject NotificationsDAL notifications
@inject MeetingPointsDAL meetingPointDAL
@inject NetworkingMeetingPointDAL networkingMeetingDAL
@inject NetworkingActivityPointDAL networkingActivityDAL
@inject AuthenticationStateProvider AuthenticationStateProvider



@if (groups == null)
{
    <p><em>Yükleniyor...</em></p>
}
else
{
    <form @onsubmit="@( () => Navigate(option))">
        <div>
            <select class="form-control" @bind="option">
                <option selected value="0"> Tum Uyeler</option>
                @for (int i = 1; i <= groups.Count; i++)
                {
                    <option value="@groups[i-1].Id">@groups[i - 1].GroupName Grubu</option>
                }
            </select>
            <br />
            <button class="btn btn-secondary" type="submit">Grup Seç</button>
        </div>
        <br />
    </form>
}

@if (userlist == null)
{
    <center>
        <p><em>Y&uuml;kleniyor...</em></p>
    </center>
}
else
{

    <button class="btn btn-primary" @onclick="@UpdatePoints"> Puanları Güncelle</button>

    <button class="btn btn-danger" @onclick="@(() => uriHelper.NavigateTo("adminsettings"))">Geri Dön</button>

    <br />
    <br />
    <br />

    <table class="table">
        <thead>
            <tr>
                <th>Ad Soyad</th>
                <th>Puan ve Son Güncelleme</th>
                <th>İşlem</th>
            </tr>
        </thead>
        <tbody>
            @foreach (AspNetUsers user in id.HasValue ? userlist.Where(x => x.Group == id) : userlist)
            {

                <tr>
                    <td>
                        <a href="/profile/@user.Id">@user.FirstName @user.LastName</a>
                    </td>
                    @if (user.PointsNavigation != null)
                    {
                        <td>
                    <tr>@user.PointsNavigation.TotalPoints</tr>
                    <tr> @user.PointsNavigation.UpdatedAt.ToShortDateString()</tr>
                    </td>
                }
                <td>
                    <a href="/addpointsnetworkmeeting/@user.Id">Puan Ver</a>
                </td>
                </tr>
            }
            </tbody>
        </table>
    }



@code {


    [Parameter] public int? id { get; set; }

    private List<AspNetUsers> userlist = new List<AspNetUsers>();
    private List<Groups> groups = new List<Groups>();
    private List<Points> pointlist = new List<Points>();


    private AspNetUsers loggedUser = new AspNetUsers();

    List<Points> pointsOfUser = new List<Points>();
    List<MeetingPoints> meetingPoints = new List<MeetingPoints>();
    List<NetworkingActivityPoint> networkingActivityPoints = new List<NetworkingActivityPoint>();
    List<NetworkingMeetingPoints> networkingMeetingPoints = new List<NetworkingMeetingPoints>();


    private int option = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userobj = authState.User;

            if (userobj.Identity.IsAuthenticated)
            {
                loggedUser = await userDAL.GetUsername(userobj.Identity.Name);

            }


            pointlist = await pointDAL.GetPoints();
            groups = await groupDAL.GetGroupsAsync();
            userlist = await userDAL.GetUsersNoNullUserList();
            meetingPoints = await meetingPointDAL.GetMeetingPoints();
            networkingMeetingPoints = await networkingMeetingDAL.GetNetworkingMeetingPoints();
            networkingActivityPoints = await networkingActivityDAL.GetNetworkingActivityPoint();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine(ex.Message);
        }
    }

    protected override void OnParametersSet()
    {
        option = id.GetValueOrDefault();
    }

    void Delete(string userId)
    {
        meetingPointDAL.DeleteMeetinPoints(userId);
        pointDAL.DeletePoints(userId);
        userDAL.DeleteUser(userId);
    }

    void Navigate(int option)
    {
        if (option == 0)
            uriHelper.NavigateTo($"/adminaccessuserlist/");
        else
            uriHelper.NavigateTo($"/adminaccessuserlist/{option}");
    }


    void UpdatePoints()
    {
        var tempUserList = id.HasValue ? userlist.Where(x => x.Group == id) : userlist;

        var pointList = new List<Points>();

        foreach (var user in tempUserList)
        {
            var meetingPointsOfUserList = meetingPoints.Where(c => c.ReceiverUserId == user.Id);
            var networkingMeetingPointsOfUserList = networkingMeetingPoints.Where(c => c.ReceiverUserId == user.Id);
            var networkingActivityPointsOfUserList = networkingActivityPoints.Where(c => c.ReceiverUserId == user.Id);


            var avgActivityPoint = networkingActivityPointsOfUserList.Any() ? networkingActivityPointsOfUserList.Average(c => c.TotalPoints) : 0;
            var avgNetworkMeetingPoint = networkingMeetingPointsOfUserList.Any() ? networkingMeetingPointsOfUserList.Average(c => c.TotalPoints) : 0;
            var avgMeetingPoint = meetingPointsOfUserList.Any() ? meetingPointsOfUserList.Average(c => c.TotalPoints) : 0;


            var pointToAdd = new Points()
            {
                UpdatedAt = DateTime.Now,
                AddedBy = $"{loggedUser.FirstName} {loggedUser.LastName}",
                UserId = user.Id,
                TotalPoints = Convert.ToInt32((avgMeetingPoint * 30 / 100) + (avgNetworkMeetingPoint * 20 / 100) + (avgActivityPoint * 50 / 100)),
            };

            pointList.Add(pointToAdd);
          //  notifications.SendNotification($"Puanınız güncellenmiştir, Yeni Puanınız: {pointToAdd.TotalPoints}", "Puan Değişikliği!", user.Id);
        }

        pointDAL.PostPoints(pointList);
        uriHelper.NavigateTo("adminsettings");
    }
}
