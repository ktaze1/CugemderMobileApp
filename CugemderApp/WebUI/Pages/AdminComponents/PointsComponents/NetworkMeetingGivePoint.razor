@page "/addpointsnetworkmeeting/{id}"
@inject AspNetUsersDAL userDAL
@inject PointsDAL pointDAL
@inject MeetingPointsDAL meetingPointDAL
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager uriHelper
@inject NotificationsDAL notifications
@inject NetworkingActivityPointDAL networkingActivityDAL
@inject NetworkingMeetingPointDAL networkingMeetingDAL


<h4> Puan Ver </h4>

<hr />


<div class="simple-form">
    <EditForm Model="form" OnValidSubmit="onNetworkMeetingSubmit">
        <DataAnnotationsValidator />
        <h4>NETWORK TOPLANTI DEĞERLENDİRME</h4>
        <br />
        <div class="form-group">
            <label>Toplantıya Katılım:</label>
            <select class="form-control"
                    @bind="form.point1">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Toplantı Saatine Uyum:</label>
            <select class="form-control"
                    @bind="form.point2">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Dress Code Uyumu:</label>
            <select class="form-control"
                    @bind="form.point3">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Mikrofon / Kamera Kalitesi / Yönetimi:</label>
            <select class="form-control"
                    @bind="form.point4">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Söz Kesme / Kesmeme:</label>
            <select class="form-control"
                    @bind="form.point5">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Süreye Uyum:</label>
            <select class="form-control"
                    @bind="form.point6">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>İsim ve Slogan Bildirimi:</label>
            <select class="form-control"
                    @bind="form.point7">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Yapılan İş Tanımı:</label>
            <select class="form-control"
                    @bind="form.point8">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Sunum Etkileyiciliği:</label>
            <select class="form-control"
                    @bind="form.point9">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Özel Görüşme İsteği Puanı:</label>
            <select class="form-control"
                    @bind="form.point10">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <br />
        <hr />
        <br />
        <button type="submit" class="btn btn-primary">Puanla</button>
        <button @onclick="@( () => { form = new PointCriteria(); })" type="button" class="btn btn-secondary">Vazgeç</button>
        <br />
        <br />
    </EditForm>
</div>


@code {

    [Parameter] public string id { get; set; }

    AspNetUsers loggedUser = new AspNetUsers(), user = new AspNetUsers();

    List<Points> pointsOfUser = new List<Points>();
    List<MeetingPoints> meetingPoints = new List<MeetingPoints>();
    Points pointToAdd = new Points();
    PointCriteria form = new PointCriteria();


    List<int> pointValues = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    Dictionary<int, string> pointBinary = new Dictionary<int, string>()
{
        {0, "Hayır" },
        {1, "Evet" }
    };

    bool isNetworkingMeeting = false, isNetworkActivity = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userobj = authState.User;
        if (userobj.Identity.IsAuthenticated)
        {
            loggedUser = await userDAL.GetUsername(userobj.Identity.Name);

        }
        user = await userDAL.GetUsers(id);

    }

    void onNetworkMeetingSubmit()
    {
        NetworkingMeetingPoints networkingMeeting = new NetworkingMeetingPoints()
        {
            UpdatedAt = DateTime.Now,
            ReceiverUserId = id,
            AddedBy = $"{loggedUser.FirstName} {loggedUser.LastName}",
        };

        networkingMeeting.TotalPoints = (form.point1 + form.point2 + form.point3
            + form.point4 + form.point5 + form.point6
            + form.point7 + form.point8 + form.point9
            + form.point10);

        networkingMeetingDAL.PostNetworkingMeetingPoints(networkingMeeting);


        uriHelper.NavigateTo("adminaccessuserlist");
    }

    public class PointCriteria
    {
        public int point1 { get; set; }

        public int point2 { get; set; }

        public int point3 { get; set; }

        public int point4 { get; set; }

        public int point5 { get; set; }

        public int point6 { get; set; }

        public int point7 { get; set; }

        public int point8 { get; set; }

        public int point9 { get; set; }

        public int point10 { get; set; }
    }

}
