@page "/meetingRequests"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AspNetUsersDAL userDAL
@inject MeetingsDAL meetingDAL
@inject MeetingPointsDAL meetingPointDAL
@inject NotificationsDAL notification
@inject NavigationManager uriHelper

@inject UserNotifListDAL userNotifDAL

<style>
    .br {
        display: block;
        margin-bottom: 0;
    }

    p {
        font-size: 16px;
    }
</style>


@if (givePoints == null && meetingList == null)
{
    <p><em>Y&uuml;kleniyor...</em></p>
}
else
{


    <table class="table">
        <thead class="table-secondary">
        <th>Puanlama Bekleyen Görüşme Talepleri</th>
        </thead>
    </table>

    @if (givePoints.Where(c => c.IsApproved == true).Count() == 0)
    {
        <p> Kayıt Bulunamadı!</p>
    }
    else
    {
        <div class="table-responsive align-content-start" style="padding-left: 1em;">
            <table class="table">
                <tbody>
                    @foreach (var meeting in givePoints.Where(c => c.IsApproved == true))
                    {
                        <tr class="row">
                            @if (meeting.Sender.Id == loggedUser.Id)
                            {
                                <td class="col-8">
                                    <a style="color: red;" href="/profile/@meeting.ReceiverId">@meeting.Receiver.FirstName @meeting.Receiver.LastName.ToUpper()</a>
                                    <br />
                                    <p style="margin-bottom: 0; color: grey;"><strong>Adres</strong>: @meeting.Location </p> <span class="br"></span>
                                    <p style="margin-bottom: 0; color: grey;"><strong>Tarih</strong>: @meeting.Date.ToLongDateString()</p> <span class="br"></span>
                                    <p style="margin-bottom: 0; color: grey;"><strong>Saat</strong>:  @meeting.Date.ToShortTimeString()</p>
                                </td>

                            }
                            else
                            {
                                <td class="col-8">
                                    <a style="color: red;" href="/profile/@meeting.SenderId">@meeting.Sender.FirstName @meeting.Sender.LastName.ToUpper()</a>
                                    <br />
                                    <p style="margin-bottom: 0; color: grey;"><strong>Adres</strong>: @meeting.Location </p> <span class="br"></span>
                                    <p style="margin-bottom: 0; color: grey;"><strong>Tarih</strong>: @meeting.Date.ToLongDateString()</p> <span class="br"></span>
                                    <p style="margin-bottom: 0; color: grey;color: grey;"><strong>Saat</strong>:  @meeting.Date.ToShortTimeString()</p>
                                </td>
                            }
                            <td class="col-4">
                                <button @onclick="@( () => uriHelper.NavigateTo($"givemeetingpoint/{meeting.Id}"))" class="btn btn-primary" type="button"> Puanla</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    }



    <table class="table">
        <thead class="table-secondary">
        <th>Onay Bekleyen Gelen Görüşme Talepleri</th>
        </thead>
    </table>

    @if (meetingList.Where(c => c.IsApproved == false && c.Date > DateTime.Now).Count() == 0)
    {
        <p> Kayıt Bulunamadı!</p>
    }
    else
    {
        <div class="table-responsive align-content-start" style="padding-left: 1em;">
            <table class="table">
                <tbody>
                    @foreach (var meeting in meetingList.Where(c => c.IsApproved == false && c.Date > DateTime.Now && c.SenderId != loggedUser.Id))
                    {
                        <tr class="row">

                            <td class="col-8">
                                <a style="color: red;" href="/profile/@meeting.SenderId">@meeting.Sender.FirstName @meeting.Sender.LastName</a>
                                <p style="margin-bottom: 0; color: grey;"><strong>Adres</strong>: @meeting.Location </p> <span class="br"></span>
                                <p style="margin-bottom: 0; color: grey;"><strong>Tarih</strong>: @meeting.Date.ToLongDateString()</p> <span class="br"></span>
                                <p style="margin-bottom: 0; color: grey;"><strong>Saat</strong>:  @meeting.Date.ToShortTimeString()</p>
                            </td>
                            <td class="col-4">
                                <button class="btn btn-primary" type="button" @onclick="@(() => Approve(meeting.Id))"> Onayla</button>
                                <button class="btn btn-danger" type="button" @onclick="@(() => Delete(meeting.Id))"> Reddet</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }


    <table class="table">
        <thead class="table-secondary">
        <th>Onay Bekleyen Gönderilen Görüşme Talepleri</th>
        </thead>
    </table>

    @if (meetingList.Where(c => c.IsApproved == false && c.Date > DateTime.Now).Count() == 0)
    {
        <p> Kayıt Bulunamadı!</p>
    }
    else
    {

        <div class="table-responsive align-content-start" style="padding-left: 1em;">
            <table class="table">
                <tbody>
                    @foreach (var meeting in meetingList.Where(c => c.IsApproved == false && c.Date > DateTime.Now && c.SenderId == loggedUser.Id))
                    {
                        <tr class="row">
                            <td class="col-8">
                                <a style="color: red; font-size: 16px;" href="/profile/@meeting.ReceiverId">@meeting.Receiver.FirstName @meeting.Receiver.LastName.ToUpper() <span style="margin-bottom: 0; color: grey;"> tarafından onay bekleniyor.</span></a>
                                <p style="margin-bottom: 0; color: grey;"><strong>Adres</strong>: @meeting.Location </p> <span class="br"></span>
                                <p style="margin-bottom: 0; color: grey;"><strong>Tarih</strong>: @meeting.Date.ToLongDateString()</p> <span class="br"></span>
                                <p style="margin-bottom: 0; color: grey;"><strong>Saat</strong>:  @meeting.Date.ToShortTimeString()</p>
                            </td>
                            <td class="col-4">
                                <button class="btn btn-danger" type="button" @onclick="@(() => Delete(meeting.Id))"> İptal Et</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    }

}


@code{


    private List<Meetings> meetingList, givePoints;
    private AspNetUsers loggedUser, sender;
    private string _userId;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            loggedUser = await userDAL.GetUsername(user.Identity.Name);
            meetingList = await meetingDAL.GetMeetingOfUser(loggedUser.Id);
            givePoints = await meetingDAL.GetMeetingNeedPoint(loggedUser.Id);
        }
    }


    async Task Delete(int meetingId)
    {
        meetingDAL.DeleteMeetings(meetingId);

    }

    async Task Approve(int meetingId)
    {
        var meeting = meetingList.First(x => x.Id == meetingId);
        meeting.IsApproved = true;
        meetingDAL.PutMeetings(meeting.Id, meeting);
        Notifications recepientNotif = new Notifications();
        Notifications senderNotif = new Notifications();


        string recepientNotifName = meeting.ReceiverId == loggedUser.Id ? $"{meeting.Sender.FirstName} {meeting.Sender.LastName}" :
        $"{meeting.Receiver.FirstName} {meeting.Receiver.LastName}";

        string senderNotifName = meeting.ReceiverId == loggedUser.Id ? $"{meeting.Receiver.FirstName} {meeting.Receiver.LastName}" :
            $"{meeting.Sender.FirstName} {meeting.Sender.LastName}";

        recepientNotif.Title = "Görüşme Talebi";
        senderNotif.Title = "Görüşme Talebi";

        recepientNotif.Body = $"Bugün İçerisinde {recepientNotifName} İle Birebir Görüşme Saati: {meeting.Date.ToString("t", AppState.trTR)} ";
        senderNotif.Body = $"Bugün İçerisinde {senderNotifName} İle Birebir Görüşme Saati:  {meeting.Date.ToString("t", AppState.trTR)} ";

        recepientNotif.Time = meeting.Date;
        senderNotif.Time = meeting.Date;

        recepientNotif.Receiver = meeting.ReceiverId;
        senderNotif.Receiver = meeting.SenderId;

        notification.AddNotificaiton(recepientNotif);
        notification.AddNotificaiton(senderNotif);

        userNotifDAL.PostUserNotifications(new UserNotificationList()
        {
            Title = "Birebir Görüşme",
            Body = $" {recepientNotifName} İle Birebir Görüşme Tarihi: {meeting.Date.ToString("F", AppState.trTR)} ",
            Date = DateTime.Now,
            Receiver = meeting.SenderId
        });

        userNotifDAL.PostUserNotifications(new UserNotificationList()
        {
            Title = "Birebir Görüşme",
            Body = $" {senderNotifName} İle Birebir Görüşme Tarihi:  {meeting.Date.ToString("F", AppState.trTR)}",
            Date = DateTime.Now,
            Receiver = meeting.ReceiverId
        });

    }
}
