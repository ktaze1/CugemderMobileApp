@page "/givemeetingpoint/{meetingId:int}"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AspNetUsersDAL userDAL
@inject MeetingsDAL meetingDAL
@inject MeetingPointsDAL meetingPointDAL
@inject NavigationManager uriHelper
@using System.ComponentModel.DataAnnotations;

<div class="simple-form">
    <EditForm Model="modalForm" OnValidSubmit="SubmitForm">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label>Toplantıya Katılım:</label>
            <select class="form-control"
                    @bind="modalForm.point1">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Toplantı Saatine Uyum:</label>
            <select class="form-control"
                    @bind="modalForm.point2">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Dress Code Uyumu:</label>
            <select class="form-control"
                    @bind="modalForm.point3">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Mikrofon / Kamera Kalitesi / Yönetimi:</label>
            <select class="form-control"
                    @bind="modalForm.point4">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Söz Kesme / Kesmeme:</label>
            <select class="form-control"
                    @bind="modalForm.point5">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Süreye Uyum:</label>
            <select class="form-control"
                    @bind="modalForm.point6">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Firmasını ve Yaptığı İşi Güzel Tanıtma:</label>
            <select class="form-control"
                    @bind="modalForm.point7">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Kendisini Güzel İfade Etme:</label>
            <select class="form-control"
                    @bind="modalForm.point8">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Sonuç Odaklılık:</label>
            <select class="form-control"
                    @bind="modalForm.point9">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Kişisel İzlenim:</label>
            <select class="form-control"
                    @bind="modalForm.point10">
                <option selected value="0">0</option>
                @for (int i = 1; i <= pointValues.Count; i++)
                {
                    <option value="@i">@pointValues[i - 1]</option>
                }
            </select>
        </div>

        <button type="submit" class="btn btn-primary">Puanla</button>
        <button @onclick="Cancel" type="button" class="btn btn-danger">Vazgeç</button>
    </EditForm>
</div>

@code {

    [Parameter] public int meetingId { get; set; }

    private AspNetUsers loggedUser;
    Meetings meeting;
    MeetingPoints meetingPoint = new MeetingPoints();
    Form modalForm = new Form();
    List<int> pointValues = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

    public class Form
    {
        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point1 { get; set; }

        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point2 { get; set; }

        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point3 { get; set; }

        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point4 { get; set; }

        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point5 { get; set; }

        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point6 { get; set; }

        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point7 { get; set; }

        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point8 { get; set; }

        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point9 { get; set; }

        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point10 { get; set; }
    }

    protected override async void OnInitialized()
    {
        meeting = await meetingDAL.GetMeeting(meetingId);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            loggedUser = await userDAL.GetUsername(user.Identity.Name);
        }
    }


    void SubmitForm()
    {
        meetingPoint.MeetingId = meetingId;

        meetingPoint.ReceiverUserId = meeting.ReceiverId;

        meetingPoint.TotalPoints = (modalForm.point1 + modalForm.point2 + modalForm.point3
            + modalForm.point4 + modalForm.point5 + modalForm.point6
            + modalForm.point7 + modalForm.point8 + modalForm.point9
            + modalForm.point10);

        if (loggedUser.Id == meeting.ReceiverId)
        {
            meeting.IsResultedbyReceiver = true;
        }
        else if (loggedUser.Id == meeting.SenderId)
        {
            meeting.IsResultedbySender = true;
        }

        meetingPointDAL.PostMeetinPoints(meetingPoint);

        meetingDAL.PutMeetings(meetingId, meeting);

        uriHelper.NavigateTo("meetingRequests");
    }

    void Cancel()
    {
        uriHelper.NavigateTo("meetingRequests");
    }

    //MeetingPoints meetingPoint;

    //        meetingPoint.MeetingId = meeting.Id;
    //        meetingPoint.ReceiverUserId = meeting.ReceiverId;
    //        meeting.IsResulted = true;
    //        await http.PostAsJsonAsync("api/MeetingPoints", meetingPoint);
    //        await http.PutAsJsonAsync($"api/Meetings/{meeting.Id}", meeting);

}