@page "/userlist"
@using Microsoft.AspNetCore.Authorization
@inject AspNetUsersDAL userDAL
@inject GroupsDAL groupDAL
@inject JobTitlesDAL jobTitleDAL
@inject PointsDAL pointDAL
@inject GendersDAL genderDAL
@inject RelationshipsDAL relationshipDAL
@inject CitiesDAL cityDAL
@inject NavigationManager  uriHelper
@inject AuthenticationStateProvider AuthenticationStateProvider


<style>
    .list {
        max-width: 700px;
    }

    .img-list a {
        text-decoration: none;
    }

    .li-sub p {
        color: red;
        margin: 0;
    }

    .list li {
        display: table;
        border-collapse: collapse;
    }

    .inner {
        display: table-row;
        overflow: hidden;
    }

    .li-img {
        display: table-cell;
        vertical-align: middle;
        border-radius: 50%;
        width: 30%;
        padding-right: 1em;
    }

        .li-img img {
            display: block;
            border-radius: 50%;
            width: 100%;
            height: auto;
        }

    .li-text {
        display: table-cell;
        vertical-align: middle;
        width: 70%;
    }

    .li-head {
        color: black;
        margin: 0;
    }

    .li-sub {
        margin: 0;
    }

    .br {
        display: block;
        margin-bottom: 0;
    } 

    @@media all and (min-width: 45em) {
        .list li {
            float: left;
            width: 50%;
        }
    }

    @@media all and (min-width: 75em) {
        .list li {
            width: 33.33333%;
        }
    }

    /* for flexbox */
    @@supports(display: flex) {
        .list {
            display: flex;
            flex-wrap: wrap;
        }

            .li-img,
            .li-text,
            .list li {
                display: block;
                float: none;
            }

        .li-img {
            align-self: center; /* to match the middle aligncoment of the original */
        }

        .inner {
            display: flex;
        }
    }

    /* for grid */
    @@supports(display: grid) {
        .list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
        }

            .list li {
                width: auto; /* this overrides the media queries */
            }
    }
</style>

<button class="btn btn-dark" @onclick="( () => ToFilterPage())"> Üye Arama ve Filtreleme </button>
<br />
<br />
@if (tempList == null)
{
<center>
    <img src="_content/CugemderApp/beeport.png" style="height: 200px; width: 200px;" />

    <p><em>Y&uuml;kleniyor</em></p>
</center>
}
else if(tempList.Count == 0)
{
    <p>Üye Bulunamadı</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr style="text-align: center;">
                <th style="font-size: large"> GRUP ÜYELERİ </th>
            </tr>
        </thead>
        <tbody>
            @{ try
                {
                    @foreach (AspNetUsers user in tempList)
                    {
                        <tr>
                            <td class="inner">
                                    <div @onclick="@( () => uriHelper.NavigateTo($"profile/{user.Id}"))" class="li-img">
                                        <img src="@user.PhotoUrl" />
                                    </div>
                                    <div class="li-text">
                                        <h6 @onclick="@( () => uriHelper.NavigateTo($"profile/{user.Id}"))" class="li-head" style="color: red;"> @user.FirstName @user.LastName.ToUpper()</h6>
                                        <div class="li-sub">
                                            <p style="color:grey; font-size:small;">
                                                Firma: <span><em>@user.Company</em></span> <span class="br"></span>
                                                Uzmanlık Alanı: <span><em>@user.Speciality</em></span> <span class="br"></span>
                                                Grup: <span><em>@user.GroupNavigation.GroupName</em></span> <span class="br"></span>
                                                Puan: <span><em>@user.PointsNavigation.TotalPoints</em></span>
                                            </p>
                                        </div>
                                    </div>
                            </td>
                        </tr>
                    }
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine(ex.Message);
                }}
        </tbody>
    </table>
}



@code {
    private AspNetUsers user = new AspNetUsers();
    private List<AspNetUsers> userlist = new List<AspNetUsers>(), tempList = new List<AspNetUsers>(), usersInGroup = new List<AspNetUsers>();
    private List<Groups> groups = new List<Groups>();
    private List<Genders> genders = new List<Genders>();
    private List<JobTitles> jobTitles = new List<JobTitles>();
    private List<Cities> cities = new List<Cities>();
    Dictionary<string, int> standings = new Dictionary<string, int>();
    Dictionary<string, int> groupStandings = new Dictionary<string, int>();
    int standingNo = 1, groupStandingNo = 1;

    private int groupId = 0;
    private int positionId = 0;
    private int genderId = 0;
    private int jobTitleId = 0;
    private int citiesId = 0;
    SearchForm sc = new SearchForm();

    bool showFilter = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userAuth = authState.User;

        if (userAuth.Identity.IsAuthenticated)
        {
            user = await userDAL.GetUsername(userAuth.Identity.Name);
        }
        userlist = await userDAL.GetUsersNoNull();
        tempList = userlist.Where(c => c.Group == user.Group).ToList();
        foreach (var user in userlist)
        {
            standings.Add(user.Email, standingNo++);
        }


        groups = await groupDAL.GetGroupsAsync();


        genders = await genderDAL.GetGenders();
        jobTitles = await jobTitleDAL.GetJobTitles();
        cities = await cityDAL.GetCities();

        foreach (var group in groups)
        {
            foreach (var user in userlist.Where(c => c.Group == group.Id))
            {
                groupStandings.Add(user.Email, groupStandingNo++);
            }
            groupStandingNo = 1;
        }

    }

    async Task Delete(string userId)
    {
        var user = userlist.First(x => x.Id == userId);

        pointDAL.DeletePoints(userId);
        userDAL.DeleteUser(userId);
    }

    public class SearchForm
    {
        public string? name { get; set; }

        public string? surname { get; set; }

        public int? jobId { get; set; }

        public int? cityId { get; set; }

        public int? groupId { get; set; }

        public int? relationshipId { get; set; }

        public int? minAge { get; set; }

        public int? maxAge { get; set; }

        public int? genderId { get; set; }
    }

    void ToggleFilter()
    {
        showFilter = !showFilter;
    }

    void ClearFilter()
    {
        sc = new SearchForm();
    }

    async void Filter()
    {
        if (userlist != null)
        {
            tempList = userlist;
            if (sc.name != null)
                tempList = tempList.Where(c => c.FirstName.ToLower().Contains(sc.name.ToLower())).ToList();
            if (sc.surname != null)
                tempList = tempList.Where(c => c.LastName.ToLower().Contains(sc.surname.ToLower())).ToList();
            if (sc.genderId != null && sc.genderId != 0)
                tempList = tempList.Where(c => c.Gender == sc.genderId).ToList();
            if (sc.groupId != null && sc.groupId != 0)
                tempList = tempList.Where(c => c.Group == sc.groupId).ToList();
            if (sc.jobId != null && sc.jobId != 0)
                tempList = tempList.Where(c => c.JobTitle == sc.jobId).ToList();
            if (sc.cityId != null && sc.cityId != 0)
                tempList = tempList.Where(c => c.LocatedCity == sc.cityId).ToList();
            if (sc.minAge != null && sc.maxAge != null)
                tempList = tempList.Where(c => c.DateOfBirth.GetValueOrDefault().Year < (DateTime.Today.Year - sc.minAge) &&
                c.DateOfBirth.GetValueOrDefault().Year > (DateTime.Today.Year - sc.maxAge)).ToList();
        }
    }

    void ToFilterPage()
    {
        uriHelper.NavigateTo("userlistfilter");
    }

}