@page "/events"
@page "/events/{id:int}"


@inject EventsDAL eventDAL
@inject AspNetUsersDAL userDAL
@inject GroupsDAL groupDAL
@inject NotificationsDAL notifications
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager uriHelper
@inject UserNotifListDAL userNotifDAL

@inject IJSRuntime js


@if (events == null)
{
    <br>

    <div style="display: flex; justify-content: center; align-items: center;">
        <p><em>Y&uuml;kleniyor</em></p>
    </div>
}
else
{

    @if (loggedUser != null)
    {
        @if (loggedUser.IsAdmin.Value)
        {

            <div>
                <button style="margin-bottom: 10px;" class="btn btn-primary" @onclick="@( () => isOpen = !isOpen)">Yeni Etkinlik Ekle</button>
                @if (isOpen)
                {

                    <div style="margin-top: 10px;" class="simple-form col-sm-3">
                        <EditForm Model="newEvent" OnValidSubmit="CreateEvent">
                            <DataAnnotationsValidator />
                            <div class="form-group">
                                <label>Başlık</label>
                                <InputText @bind-Value="newEvent.Title" class="form-control" placeholder="Başlık Giriniz" />
                                <ValidationMessage For="@(() => newEvent.Title)" />
                            </div>
                            <div class="form-group">
                                <label>Lokasyon</label>
                                <InputText @bind-Value="newEvent.Location" class="form-control" placeholder="Adres Giriniz" />
                                <ValidationMessage For="@(() => newEvent.Location)" />
                            </div>
                            <div class="form-group">
                                <label>Açıklama</label>
                                <InputTextArea @bind-Value="newEvent.Summary" class="form-control" placeholder="Açıklama Giriniz" />
                                <ValidationMessage For="@(() => newEvent.Summary)" />
                            </div>
                            <div class="form-group">
                                <label for="createdDate">Tarih ve Saat</label>
                                <InputDateTime class="form-control" @bind-Value="newEvent.Date" />
                                <ValidationMessage For="@(() => newEvent.Date)" />
                            </div>
                            <div class="form-group">
                                <label>Grup</label>
                                @if (groupList != null)
                                {
                                    <select class="form-control"
                                            @bind="newEvent.RelatedGroup">
                                        <option value="0">Seç</option>
                                        @foreach (var group in groupList)
                                        {
                                            @if (group.Id == groupId)
                                            {
                                                <option selected value="@group.Id">@group.GroupName</option>
                                            }
                                            else
                                            {
                                                <option value="@group.Id">@group.GroupName</option>
                                            }

                                        }
                                    </select>
                                }
                            </div>

                            <button type="submit" class="btn btn-primary">Ekle</button>
                        </EditForm>
                    </div>
                }
            </div>
        }
    }
    <br />
    <table class="table table-striped">
        <tbody>
            <table class="table" style="margin-bottom: 0px">
                <thead class="table-secondary">
                <th>Yaklaşan Etkinlikler</th>
                </thead>
            </table>

            @if (events.Where(c => c.Date.GetValueOrDefault() > DateTime.Now).Count() == 0)
            {
                <div style="margin-top: 10px;">
                    <center>
                        <p>Yaklaşan Etkinlik Bulunamadı.</p>
                    </center>
                </div>

            }
            else
            {
                @foreach (Events eachEvent in loggedUser.IsAdmin.Value.Equals(true) ? events.Where(c => c.Date.GetValueOrDefault() > DateTime.Now).Take(10) : events.Where(c => c.Date.GetValueOrDefault() > DateTime.Now && (c.RelatedGroup == loggedUser.Group || c.RelatedGroup == null)).Take(10))
                {
                    <tr>
                        <td>
                            <p style="color: red"> <b>Başlık</b>: <span style="color: black;"> @eachEvent.Title </span></p>
                            <p style="color: red"> <b>Lokasyon</b>: <span style="color: black;"> @eachEvent.Location </span></p>
                            <p style="color: red"> <b>Tarih</b>: <span style="color: black;"> @eachEvent.Date.GetValueOrDefault().ToLongDateString() </span></p>
                            <p style="color: red"> <b>Saat</b>: <span style="color: black;"> @eachEvent.Date.GetValueOrDefault().ToShortTimeString() </span></p>
                            <p style="color: red"> <b>Açıklama</b>: <span style="color: black;"> @eachEvent.Summary </span></p>
                            @if (eachEvent.RelatedGroupNavigation != null)
                            {<p style="color: red"> <b>Grup</b>: <span style="color: black;"> @eachEvent.RelatedGroupNavigation.GroupName</span></p>}
                            @if (loggedUser.IsAdmin.Value.Equals(true))
                            {
                                <a class="btn btn-primary" href="events/edit/@eachEvent.Id">Düzenle</a>
                                <button class="btn btn-danger" @onclick="@(() => Delete(eachEvent.Id))">Sil</button>
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <br />
    <table class="table table-striped">

        <table class="table" style="margin-bottom: 0px">
            <thead class="table-secondary">
            <th>Geçmiş Etkinlikler</th>
            </thead>
        </table>

        <tbody>
            @if (events.Where(c => c.Date.GetValueOrDefault() < DateTime.Now).Count() == 0)
            {
                <div style="margin-top: 10px;">
                    <center>
                        <p>Geçmiş Etkinlik Bulunamadı.</p>
                    </center>
                </div>
            }
            else
            {
                @foreach (Events eachEvent in loggedUser.IsAdmin.Value.Equals(true) ? events.Where(c => c.Date.GetValueOrDefault() < DateTime.Now).Take(20) : events.Where(c => c.Date.GetValueOrDefault() < DateTime.Now && (c.RelatedGroup == loggedUser.Group || c.RelatedGroup == null)).Take(20))
                {
                    <tr>
                        <td>
                            <p style="color: red"> <b>Başlık</b>: <span style="color: black;"> @eachEvent.Title </span></p>
                            <p style="color: red"> <b>Lokasyon</b>: <span style="color: black;"> @eachEvent.Location </span></p>
                            <p style="color: red"> <b>Tarih</b>: <span style="color: black;"> @eachEvent.Date.GetValueOrDefault().ToLongDateString() </span></p>
                            <p style="color: red"> <b>Saat</b>: <span style="color: black;"> @eachEvent.Date.GetValueOrDefault().ToShortTimeString() </span></p>
                            <p style="color: red"> <b>Açıklama</b>: <span style="color: black;"> @eachEvent.Summary </span></p>
                            @if (eachEvent.RelatedGroupNavigation != null)
                            {<p style="color: red"> <b>Grup</b>:<span style="color: black;"> @eachEvent.RelatedGroupNavigation.GroupName</span></p>}
                            @if (loggedUser.IsAdmin.Value.Equals(true))
                            {
                                <a class="btn btn-primary" href="events/edit/@eachEvent.Id">Düzenle</a>
                                <button class="btn btn-danger" @onclick="@(() => Delete(eachEvent.Id))">Sil</button>
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private AspNetUsers loggedUser;
    private string _userId;
    List<Groups> groupList = new List<Groups>();
    public int groupId = 0;
    [Parameter] public int id { get; set; }
    bool isOpen = false;

    Events newEvent = new Events();
    List<Events> events = new List<Events>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            loggedUser = await userDAL.GetUsername(user.Identity.Name);
            events = await eventDAL.GetEvents();
            groupList = await groupDAL.GetGroupsAsync();
        }
    }

    async Task Delete(int eventID)
    {
        eventDAL.DeleteEvents(eventID);
        notifications.DeleteNotification(eventID);
        RefreshPageContent();
    }

    void CreateEvent()
    {
        if (newEvent.Title == null || newEvent.Summary == null
           || newEvent.Location == null)
        {
            js.InvokeVoidAsync("swal", "Etkinlik Boş Girilemez!", "", "error");
        }
        else
        {
            if (newEvent.RelatedGroup == null)
            {
                newEvent.RelatedGroup = null;
                foreach (var item in groupList)
                {
                    notifications.SendNotification($"{newEvent.Date.Value.ToString("D", AppState.trTR)} Tarihinde Etkinlik Olacaktır.", "Yeni Etkinlik!", item.GroupName);
                    notifications.AddNotificaiton(new Notifications()
                    {
                        Title = "Etkinlik",
                        Body = $"Bugün Olacak Etkinliğin Saati: {newEvent.Date.Value.ToString("t", AppState.trTR)}. ",
                        Time = newEvent.Date.Value,
                        Receiver = item.GroupName
                    });

                    userNotifDAL.PostUserNotifications(new UserNotificationList(){
                        Title = "Etkinlik",
                        Body = $"Bugün Olacak Etkinliğin Saati: {newEvent.Date.Value.ToString("t", AppState.trTR)}. ",
                        Date = DateTime.Now,
                        Receiver = item.GroupName
                    });
                }
            }
            else if (newEvent.RelatedGroup != 0)
            {
                notifications.SendNotification($"{newEvent.Date.Value.ToString("D", AppState.trTR)} Tarihinde Etkinlik Olacaktır.", "Yeni Etkinlik!", groupList.Where(c => c.Id == newEvent.RelatedGroup).First().GroupName);
                notifications.AddNotificaiton(new Notifications()
                {
                    Title = "Etkinlik",
                    Body = $"Bugün Olacak Etkinliğin Saati: {newEvent.Date.Value.ToString("t", AppState.trTR)}. ",
                    Time = newEvent.Date.Value,
                    Receiver = groupList.Where(c => c.Id == newEvent.RelatedGroup).First().GroupName
                });
            }

            eventDAL.PostEvents(newEvent);
            RefreshPageContent();
            newEvent = new Events();
        }
    }

    async void RefreshPageContent()
    {
        events = await eventDAL.GetEvents();
        System.Threading.Thread.Sleep(100);
        uriHelper.NavigateTo("redirect/events");
        await OnInitializedAsync();
    }
}