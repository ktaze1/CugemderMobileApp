@page "/addpoints/{id}"
@inject AspNetUsersDAL userDAL
@inject PointsDAL pointDAL
@inject MeetingPointsDAL meetingPointDAL
@inject AuthenticationStateProvider AuthenticationStateProvider


@using System.ComponentModel.DataAnnotations;


<div class="simple-form">
    <EditForm Model="form" OnValidSubmit="onSubmit">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label>Toplantıya Katılım:</label>
            <InputNumber @bind-Value="form.point1" class="form-control" placeholder="Puan Giriniz" />
            <ValidationMessage For="@(() => form.point1)" />
        </div>
        <div class="form-group">
            <label>Toplantı Saatine Uyum:</label>
            <InputNumber @bind-Value="form.point2" class="form-control" placeholder="Puan Giriniz" />
            <ValidationMessage For="@(() => form.point2)" />
        </div>
        <div class="form-group">
            <label>Dress Code Uyumu:</label>
            <InputNumber @bind-Value="form.point3" class="form-control" placeholder="Puan Giriniz" />
            <ValidationMessage For="@(() => form.point3)" />
        </div>
        <div class="form-group">
            <label>Mikrofon / Kamera Kalitesi / Yönetimi:</label>
            <InputNumber @bind-Value="form.point4" class="form-control" placeholder="Puan Giriniz" />
            <ValidationMessage For="@(() => form.point4)" />
        </div>
        <div class="form-group">
            <label>Söz Kesme / Kesmeme:</label>
            <InputNumber @bind-Value="form.point5" class="form-control" placeholder="Puan Giriniz" />
            <ValidationMessage For="@(() => form.point5)" />
        </div>
        <div class="form-group">
            <label>Süreye Uyum:</label>
            <InputNumber @bind-Value="form.point6" class="form-control" placeholder="Puan Giriniz" />
            <ValidationMessage For="@(() => form.point6)" />
        </div>
        <div class="form-group">
            <label>Firmasını ve Yaptığı İşi Güzel Tanıtma:</label>
            <InputNumber @bind-Value="form.point7" class="form-control" placeholder="Puan Giriniz" />
            <ValidationMessage For="@(() => form.point7)" />
        </div>
        <div class="form-group">
            <label>Kendisini Güzel İfade Etme:</label>
            <InputNumber @bind-Value="form.point8" class="form-control" placeholder="Puan Giriniz" />
            <ValidationMessage For="@(() => form.point8)" />
        </div>
        <div class="form-group">
            <label>Sonuç Odaklılık:</label>
            <InputNumber @bind-Value="form.point9" class="form-control" placeholder="Puan Giriniz" />
            <ValidationMessage For="@(() => form.point9)" />
        </div>
        <div class="form-group">
            <label>Kişisel İzlenim:</label>
            <InputNumber @bind-Value="form.point10" class="form-control" placeholder="Puan Giriniz" />
            <ValidationMessage For="@(() => form.point10)" />
        </div>
        <div class="form-group">
            <label>Toplantıya Katılım:</label>
            <InputNumber @bind-Value="form.point11" class="form-control" placeholder="Puan Giriniz" />
            <ValidationMessage For="@(() => form.point11)" />
        </div>
        <div class="form-group">
            <label>Toplantı Saatine Uyum:</label>
            <InputNumber @bind-Value="form.point12" class="form-control" placeholder="Puan Giriniz" />
            <ValidationMessage For="@(() => form.point12)" />
        </div>
        <div class="form-group">
            <label>Dress Code Uyumu:</label>
            <InputNumber @bind-Value="form.point13" class="form-control" placeholder="Puan Giriniz" />
            <ValidationMessage For="@(() => form.point13)" />
        </div>
        <div class="form-group">
            <label>Mikrofon / Kamera Kalitesi / Yönetimi:</label>
            <InputNumber @bind-Value="form.point14" class="form-control" placeholder="Puan Giriniz" />
            <ValidationMessage For="@(() => form.point14)" />
        </div>
        <div class="form-group">
            <label>Söz Kesme / Kesmeme:</label>
            <InputNumber @bind-Value="form.point15" class="form-control" placeholder="Puan Giriniz" />
            <ValidationMessage For="@(() => form.point15)" />
        </div>
        <button type="submit" class="btn btn-primary">Puanla</button>
        <button @onclick="@( () => { form = new PointCriteria(); })" type="button" class="btn btn-secondary">Vazgeç</button>
    </EditForm>
</div>


@code {

    [Parameter] public string id { get; set; }
    AspNetUsers user;
    private AspNetUsers loggedUser;
    List<Points> pointsOfUser;
    List<MeetingPoints> meetingPoints;
    Points pointToAdd = new Points();
    PointCriteria form = new PointCriteria();

    int noMeetingPoints, noPoints;

    int meetingPointTotal = 0, networkingMeetingPoint = 0, networkingActivity = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userobj = authState.User;

        if (userobj.Identity.IsAuthenticated)
        {
            loggedUser = await userDAL.GetUserID(userobj.Identity.Name);

        }
        user = await userDAL.GetUsers(id);
        meetingPoints = await meetingPointDAL.GetMeetingPoints();
        pointsOfUser = await pointDAL.GetPoints();
        pointsOfUser = pointsOfUser.Where(c => c.UserId == id).ToList();
        meetingPoints = meetingPoints.Where(c => c.ReceiverUserId == id).ToList();
        foreach (var item in meetingPoints)
        {
            meetingPointTotal += item.TotalPoints;
        }
        meetingPointTotal /= meetingPoints.Count();
        foreach (var item in pointsOfUser)
        {
            networkingMeetingPoint += item.CategoryNetworkingMeetingPoint;
            networkingActivity += item.CategoryNetworkingActivityPoint;
        }
        noMeetingPoints = meetingPoints.Count();
        noPoints = pointsOfUser.Count();
    }

    void onSubmit()
    {
        pointToAdd.UpdatedAt = DateTime.Now;

        pointToAdd.AddedBy = loggedUser.Id;

        pointToAdd.UserId = id;

        pointToAdd.CategoryMeetingPoint = meetingPointTotal;

        pointToAdd.CategoryNetworkingMeetingPoint = (form.point1 + form.point2 + form.point3
            + form.point4 + form.point5 + form.point6
            + form.point7 + form.point8 + form.point9
            + form.point10);

        pointToAdd.CategoryNetworkingActivityPoint = 20 * (form.point11 + form.point12 + form.point13
            + form.point14 + form.point15);

        int meetingPointAvg = noMeetingPoints == 0 ? 0 : ((pointToAdd.CategoryMeetingPoint / noMeetingPoints) * 30 / 100);
        int networkingMeetingAvg = noPoints == 0 ? 0 : (((pointToAdd.CategoryNetworkingMeetingPoint + networkingMeetingPoint) / noPoints) * 20 / 100);
        int networkingActivityAvg = noPoints == 0 ? 0 :(((pointToAdd.CategoryNetworkingActivityPoint + networkingActivity) / noPoints) * 50 / 100);
        pointToAdd.TotalPoints = meetingPointAvg + networkingMeetingAvg + networkingActivityAvg;

    pointDAL.PostPoints(pointToAdd);
    }

    public class PointCriteria
    {
        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point1 { get; set; }

        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point2 { get; set; }

        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point3 { get; set; }

        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point4 { get; set; }

        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point5 { get; set; }

        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point6 { get; set; }

        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point7 { get; set; }

        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point8 { get; set; }

        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point9 { get; set; }

        [Range(0, 10, ErrorMessage = "Puan 0 ile 10 arasında olmalıdır!")]
        public int point10 { get; set; }

        [Range(0, 1, ErrorMessage = "Puan 0 ile 1 arasında olmalıdır!")]
        public int point11 { get; set; }

        [Range(0, 1, ErrorMessage = "Puan 0 ile 1 arasında olmalıdır!")]
        public int point12 { get; set; }

        [Range(0, 1, ErrorMessage = "Puan 0 ile 1 arasında olmalıdır!")]
        public int point13 { get; set; }

        [Range(0, 1, ErrorMessage = "Puan 0 ile 1 arasında olmalıdır!")]
        public int point14 { get; set; }

        [Range(0, 1, ErrorMessage = "Puan 0 ile 1 arasında olmalıdır!")]
        public int point15 { get; set; }

    }

}
