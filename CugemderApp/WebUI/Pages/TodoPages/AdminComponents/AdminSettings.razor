@*@page "/adminsettings"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js

<table class="table">
    <thead class="thead-light">
        <tr>
            <td><h3> Ayarlar </h3></td>
            <td></td>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                <div class="nav-link">
                    <span class="oi oi-shield" aria-hidden="true"></span> Rolleri ata
                </div>
            </td>
            <td>
                <button class="btn btn-info" @onclick="@AssignRoles">Rolleri ata </button>
            </td>
        </tr>
        <tr>
            <td>
                <NavLink class="nav-link" href="groups">
                    <span class="oi oi-people" aria-hidden="true"></span>Grup Listesi
                </NavLink>
            </td>
            <td>
                <CugemderPortal.Client.Pages.GroupComponents.GroupsForm ButtonText="Grup Ekle" group="@group" OnValidSubmit="@CreateGroup" />
            </td>
        </tr>
        <tr>
            <td>
                <NavLink class="nav-link" href="addpoints">
                    <span class="oi oi-people" aria-hidden="true"></span>Puan Atamasi Yap
                </NavLink>
            </td>
            <td></td>
        </tr>
        <tr>
            <td>
                <NavLink class="nav-link" href="events">
                    <span class="oi oi-people" aria-hidden="true"></span>Etkinlik Listesine Git
                </NavLink>
            </td>
            <td>
                <button @onclick="ShowModal" class="btn btn-primary">Etkinlik Ekle</button>
            </td>
        </tr>
    </tbody>
</table>

@code {

    private AspNetUsers[] userlistNoRole;
    private AspNetUsers[] waitingUsers;
    Groups group = new Groups();

    protected override async Task OnInitializedAsync()
    {
        userlistNoRole = await http.GetFromJsonAsync<AspNetUsers[]>("api/AspNetUsers/NoRole");
        waitingUsers = await http.GetFromJsonAsync<AspNetUsers[]>("api/AspNetUsers/noGroup");
    }

    async Task AssignRoles()
    {
        if (waitingUsers.Length == 0)
        {

            foreach (var user in userlistNoRole)
            {
                await http.PostAsJsonAsync<AspNetUsers>("AddNewRole", user);
            }
        }
        else
        {
            uriHelper.NavigateTo("waitinglist");
        }
    }

    async Task CreateGroup()
    {
        group.CreatedAt = DateTime.UtcNow;
        await http.PostAsJsonAsync<Groups>("api/Groups", group);
        if (await js.InvokeAsync<bool>("confirm", $"Baska Grup Eklemek Ister Misiniz?"))
        {
            await OnInitializedAsync();
        }
        else
        {
            uriHelper.NavigateTo("groups");
        }
    }

    [CascadingParameter] public IModalService Modal { get; set; }

    Events events;

    async Task ShowModal()
    {
        var MeetingModal = Modal.Show<CugemderPortal.Client.Pages.EventComponents.EventCreateModal>();
        var result = await MeetingModal.Result;

        if (!result.Cancelled)
        {
            events = (Events)result.Data;
            await http.PostAsJsonAsync("api/Events", events);
        }
    }
}*@
