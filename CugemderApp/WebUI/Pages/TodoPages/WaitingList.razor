@page "/waitinglist"
@inject AspNetUsersDAL userDAL
@inject GroupsDAL groupDAL
@inject PointsDAL pointDAL
@inject NavigationManager  uriHelper

@if (waitingUsers == null)
{
    <p> Loading</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Uye Adı</th>
                <th>Atanacak Grubu</th>
                <th>Kullanıcıyı Sil</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in waitingUsers)
            {
                <tr>
                    <td>@user.FirstName @user.LastName</td>
                    <td>
                        <select class="form-control"
                                @bind="user.Group">
                            <option value="0">---Grup Seçin---</option>
                            @foreach (var group in groups)
                            {
                                @if (group.Id == groupId)
                                {
                                    <option selected value="@group.Id">@group.GroupName</option>
                                }
                                else
                                {
                                    <option value="@group.Id">@group.GroupName</option>
                                }

                            }
                        </select>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(() => Delete(user.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button type="submit" class="btn-primary" @onclick="@Update"> Guncelle </button>
}
@code {
    List<AspNetUsers> waitingUsers;
    public int groupId = 0;
    List<Groups> groups;
    List<Points> points;

    protected override async Task OnInitializedAsync()
    {
        waitingUsers = await userDAL.GetUsersNoGroup();
        groups = await groupDAL.GetGroupsAsync();
        points = await pointDAL.GetPoints();


    }

    async void Update()
    {
        foreach (AspNetUsers user in waitingUsers)
        {
            user.EmailConfirmed = true;
            user.LastGroupName = groups.Where(c => c.Id == user.Group).FirstOrDefault().GroupName;
            user.Points = points.Where(c => c.UserId == user.Id).FirstOrDefault().Id;
            userDAL.PutUser(user.Id, user);
        }
        uriHelper.NavigateTo("");
    }


    async Task Delete(string userId)
    {
        var user = waitingUsers.First(x => x.Id == userId);
        pointDAL.DeletePoints(userId);
        userDAL.DeleteUser(userId);
        await OnInitializedAsync();
    }
}