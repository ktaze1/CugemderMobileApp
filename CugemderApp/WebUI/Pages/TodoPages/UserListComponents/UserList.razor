@page "/userlist"
@using Microsoft.AspNetCore.Authorization
@inject AspNetUsersDAL userDAL
@inject GroupsDAL groupDAL
@inject JobTitlesDAL jobTitleDAL
@inject PointsDAL pointDAL
@inject GendersDAL genderDAL
@inject RelationshipsDAL relationshipDAL
@inject CitiesDAL cityDAL
@inject NavigationManager  uriHelper

<h1> Üyeler </h1>
<button class="btn-dark" @onclick="@ToggleFilter"> Uye Filtreleme </button>
<br />
@if (showFilter)
{
    @if (groups != null && jobTitles != null && genders != null && relationships != null && cities != null)
    {
        <br />
        <EditForm Model="sc" OnValidSubmit="Filter">
            <div>
                <div>
                    <label>Ad: </label>
                    <InputText class="input-group" @bind-Value="sc.name" />
                </div>
                <div>
                    <label>Soyad: </label>
                    <InputText class="input-group" @bind-Value="sc.surname" />
                </div>
            </div>
            <div>
                <label>Cinsiyet :</label>
                <div>
                    <select class="form-control-sm" @bind="sc.genderId">
                        <option value="0">---Cinsiyet Seçin---</option>
                        @foreach (var gender in genders)
                        {
                            @if (gender.Id == genderId)
                            {
                                <option selected value="@gender.Id">@gender.GenderName</option>
                            }
                            else
                            {
                                <option value="@gender.Id">@gender.GenderName</option>
                            }

                        }
                    </select>
                </div>
            </div>
            <div>
                <label>Grup :</label>
                <div>
                    <select class="form-control-sm" @bind="sc.groupId">
                        <option value="0">---Grup Seçin---</option>
                        @foreach (var group in groups)
                        {
                            @if (group.Id == groupId)
                            {
                                <option selected value="@group.Id">@group.GroupName</option>
                            }
                            else
                            {
                                <option value="@group.Id">@group.GroupName</option>
                            }

                        }
                    </select>
                </div>
            </div>
            <div>
                <label>Meslek :</label>
                <div>
                    <select class="form-control-sm" @bind="sc.jobId">
                        <option value="0">---Meslek Secin---</option>
                        @foreach (var jobTitle in jobTitles)
                        {
                            @if (jobTitle.Id == jobTitleId)
                            {
                                <option selected value="@jobTitle.Id">@jobTitle.TitleName</option>
                            }
                            else
                            {
                                <option value="@jobTitle.Id">@jobTitle.TitleName</option>
                            }

                        }
                    </select>
                </div>
            </div>
            <div>
                <label>Şehir :</label>
                <div>
                    <select class="form-control-sm" @bind="sc.cityId">
                        <option value="0">---Şehir Seçin---</option>
                        @foreach (var city in cities)
                        {
                            @if (city.Id == citiesId)
                            {
                                <option selected value="@city.Id">@city.CityName</option>
                            }
                            else
                            {
                                <option value="@city.Id">@city.CityName</option>
                            }

                        }
                    </select>
                </div>
            </div>
            <div>
                <label>Medeni Hali :</label>
                <div>
                    <select class="form-control-sm" @bind="sc.relationshipId">
                        <option value="0">---Medeni Hal Seçin---</option>
                        @foreach (var relation in relationships)
                        {
                            @if (relation.Id == relationshipId)
                            {
                                <option selected value="@relation.Id">@relation.RelationshipStatus</option>
                            }
                            else
                            {
                                <option value="@relation.Id">@relation.RelationshipStatus</option>
                            }

                        }
                    </select>
                </div>
            </div>
            <br />
            <div>
                <label>Min-Max Yas</label>
                <InputNumber style="width: 2em;" @bind-Value="sc.minAge" /> -
                <InputNumber style="width: 2em;" @bind-Value="sc.maxAge" />
            </div>

            <button class="btn btn-dark"> Filtrele</button>
            <button class="btn btn-light" type="button" @onclick="ClearFilter"> Filtreleri Temizle</button>
        </EditForm>

    }

}

<br />

@if (tempList == null)
{
    <p><em>Yükleniyor...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Sıralama</th>
                <th>Ad Soyad</th>
                <th>Puan</th>
                <th>Grup</th>
                <!--<th>İşlemler</th>-->
            </tr>
        </thead>
        <tbody>
            @foreach (AspNetUsers user in tempList)
            {

                <tr>
                    <td>@standings[user.Email]</td>
                    <td><a href="/profile/@user.Id">@user.FirstName @user.LastName</a></td>
                    @if (user.PointsNavigation == null)
                    {
                        <td> - </td>
                    }
                    else
                    {
                        <td>@user.PointsNavigation.TotalPoints</td>
                    }
                    @if (user.GroupNavigation == null)
                    {
                        <td> - </td>
                    }
                    else
                    {
                        <td>@user.GroupNavigation.GroupName</td>
                    }
                    <!--
                            <td>
                                <a class="btn btn-success" href="users/edit/@user.Id">Düzenle</a>
                                <button class="btn btn-danger" @onclick="@(() => Delete(user.Id))">Sil</button>
                            </td>
                    -->
                </tr>
            }
        </tbody>
    </table>
}



@code {

    private List<AspNetUsers> userlist, tempList;
    private List<Groups> groups;
    private List<Genders> genders;
    private List<JobTitles> jobTitles;
    private List<Relationship> relationships;
    private List<Cities> cities;
    Dictionary<string, int> standings = new Dictionary<string, int>();
    int standingNo = 1;

    [Parameter] public int? id { get; set; }

    private int groupId = 0;
    private int positionId = 0;
    private int genderId = 0;
    private int jobTitleId = 0;
    private int relationshipId = 0;
    private int citiesId = 0;
    SearchForm sc = new SearchForm();

    bool showFilter = false;

    protected override async Task OnInitializedAsync()
    {
        userlist = await userDAL.GetUsersNoNull();
        foreach (var user in userlist)
        {
            standings.Add(user.Email, standingNo++);
        }
        tempList = userlist;
        groups = await groupDAL.GetGroupsAsync();
        genders = await genderDAL.GetGenders();
        jobTitles = await jobTitleDAL.GetJobTitles();
        cities = await cityDAL.GetCities();
        relationships = await relationshipDAL.GetRelationships();

    }

    async Task Delete(string userId)
    {
        var user = userlist.First(x => x.Id == userId);

        pointDAL.DeletePoints(userId);
        userDAL.DeleteUser(userId);
        await OnInitializedAsync();
    }

    void Navigate(int option)
    {
        if (option == 0)
        {
            uriHelper.NavigateTo($"/userlist/");
        }
        else
        {
            uriHelper.NavigateTo($"/userlist/{groups.ElementAt(option - 1).Id}");
        }
    }

    public class SearchForm
    {
        public string? name { get; set; }

        public string? surname { get; set; }

        public int? jobId { get; set; }

        public int? cityId { get; set; }

        public int? groupId { get; set; }

        public int? relationshipId { get; set; }

        public int? minAge { get; set; }

        public int? maxAge { get; set; }

        public int? genderId { get; set; }
    }

    void ToggleFilter()
    {
        showFilter = !showFilter;
    }

    void ClearFilter()
    {
        sc = new SearchForm();
    }

    async void Filter()
    {
        if (userlist != null)
        {
            tempList = userlist;
            if (sc.name != null)
                tempList = tempList.Where(c => c.FirstName.ToLower().Contains(sc.name.ToLower())).ToList();
            if (sc.surname != null)
                tempList = tempList.Where(c => c.LastName.ToLower().Contains(sc.surname.ToLower())).ToList();
            if (sc.genderId != null && sc.genderId != 0)
                tempList = tempList.Where(c => c.Gender == sc.genderId).ToList();
            if (sc.groupId != null && sc.groupId != 0)
                tempList = tempList.Where(c => c.Group == sc.groupId).ToList();
            if (sc.jobId != null && sc.jobId != 0)
                tempList = tempList.Where(c => c.JobTitle == sc.jobId).ToList();
            if (sc.relationshipId != null && sc.relationshipId != 0)
                tempList = tempList.Where(c => c.Relationship == sc.relationshipId).ToList();
            if (sc.minAge != null && sc.maxAge != null)
                tempList = tempList.Where(c => c.DateOfBirth.GetValueOrDefault().Year < (DateTime.Today.Year - sc.minAge) &&
                c.DateOfBirth.GetValueOrDefault().Year > (DateTime.Today.Year - sc.maxAge)).ToList();
        }
    }


}