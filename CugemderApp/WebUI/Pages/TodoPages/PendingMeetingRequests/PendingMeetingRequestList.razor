@page "/meetingRequests"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AspNetUsersDAL userDAL
@inject MeetingsDAL meetingDAL
@inject MeetingPointsDAL meetingPointDAL
@inject NavigationManager uriHelper
<h3> Puanlama Bekleyen Görüşme Talepleri </h3>


@if (givePoints == null)
{
    <p><em>Yükleniyor</em></p>
}
else if (givePoints.Where(c => c.IsApproved == true).Count() == 0)
{
    <p> Kayıt Bulunamadı!</p>
}
else
{
    <div class="table-responsive align-content-start" style="padding-left: 1em;">
        <table class="table">
            <thead class="thead-light">
                <tr class="row">
                    <th class="col">Gonderen Uye</th>
                    <th class="col">Lokasyon ve Tarih</th>
                    <th class="col">İşlem</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var meeting in givePoints.Where(c => c.IsApproved == true))
                {
                <tr class="row">
                    @if (meeting.Sender.Id == loggedUser.Id)
                    {
                        <td class="col-4"><a href="/profile/@meeting.ReceiverId">@meeting.Receiver.FirstName @meeting.Receiver.LastName</a></td>
                    }
                    else
                    {
                        <td class="col-4"><a href="/profile/@meeting.SenderId">@meeting.Sender.FirstName @meeting.Sender.LastName</a></td>
                    }
                    <td class="col-4">
                        <p><strong>Adres</strong>: @meeting.Location </p>
                        <p><strong>Tarih</strong>: @meeting.Date.ToLongDateString()</p>
                        <p><strong>Saat</strong>:  @meeting.Date.ToLongTimeString()</p>
                    </td>
                    <td class="col-4">
                        <button @onclick="@( () => uriHelper.NavigateTo($"givemeetingpoint/{meeting.Id}"))" class="btn btn-primary" type="button"> Puanla</button>
                    </td>
                </tr>
                }
            </tbody>
        </table>

    </div>
}

<h3> Onay Bekleyen Görüşme Talepleri </h3>


@if (meetingList == null)
{
    <p><em>Yükleniyor</em></p>
}
else if (meetingList.Where(c => c.IsApproved == false && c.Date > DateTime.Now).Count() == 0)
{
    <p> Kayıt Bulunamadı!</p>
}
else
{
    <div class="table-responsive align-content-start" style="padding-left: 1em;">
        <table class="table">
            <thead class="thead-light">
                <tr class="row">
                    <th class="col"> Gonderen Uye</th>
                    <th class="col"> Lokasyon ve Tarih</th>
                    <th class="col"> İşlem</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var meeting in meetingList.Where(c => c.IsApproved == false  && c.Date > DateTime.Now))
                {
                <tr class="row">
                    @if (meeting.SenderId == loggedUser.Id)
                    {
                    <td class="col">
                        <a href="/profile/@meeting.ReceiverId">@meeting.Receiver.FirstName @meeting.Receiver.LastName</a>
                        <p> tarafından onay bekleniyor.</p>
                    </td>
                        <td class="col">
                            <p><strong>Adres</strong>: @meeting.Location </p>
                            <p><strong>Tarih</strong>: @meeting.Date.ToLongDateString()</p>
                            <p><strong>Saat</strong>:  @meeting.Date.ToLongTimeString()</p>
                        </td>
                        <td class="col">
                            <button class="btn btn-danger" type="button" @onclick="@(() => Delete(meeting.Id))"> İptal Et</button>
                        </td>
                    }
                    else
                    {
                        <td class="col"><a href="/profile/@meeting.SenderId">@meeting.Sender.FirstName @meeting.Sender.LastName</a></td>
                        <td class="col">
                            <p><strong>Adres</strong>: @meeting.Location </p>
                            <p><strong>Tarih</strong>: @meeting.Date.ToLongDateString()</p>
                            <p><strong>Saat</strong>:  @meeting.Date.ToLongTimeString()</p>
                        </td>
                        <td class="col">
                            <button class="btn btn-info" type="button" @onclick="@(() => Approve(meeting.Id))"> Onayla</button>
                            <button class="btn btn-danger" type="button" @onclick="@(() => Delete(meeting.Id))"> Reddet</button>
                        </td>
                    }
                </tr>
                }
            </tbody>
        </table>

    </div>
}
@code{


    private List<Meetings> meetingList, givePoints;
    private AspNetUsers loggedUser, sender;
    private string _userId;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            loggedUser = await userDAL.GetUserID(user.Identity.Name);
            meetingList = await meetingDAL.GetMeetingOfUser(loggedUser.Id);
            givePoints = await meetingDAL.GetMeetingNeedPoint(loggedUser.Id);
        }
    }


    async Task Delete(int meetingId)
    {
        meetingDAL.DeleteMeetings(meetingId);

    }

    async Task Approve(int meetingId)
    {
        var meeting = meetingList.First(x => x.Id == meetingId);
        meeting.IsApproved = true;
        meetingDAL.PutMeetings(meeting.Id, meeting);
    }
}