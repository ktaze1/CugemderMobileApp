@page "/events"
@inject EventsDAL eventDAL

<h3>Etkinlikler</h3>

<br>
@if (events == null)
{
    <text>Loading...</text>
}
else if (events.Count == 0)
{
    <text>Etkinlik bulunamadi</text>
}
else
{
    <table class="table table-striped">
        <tbody>
            @foreach (Events eachEvent in events)
            {

                <tr>
                    <div class="row">
                        <div class="col-sm">
                            <div class="card">
                                <div class="card-body">
                                    <h5 class="card-title">@eachEvent.Title</h5>
                                    <p> Lokasyon : @eachEvent.Location </p>
                                    <p> Tarih: @eachEvent.Date.GetValueOrDefault().ToLongDateString() </p>
                                    <p> Saat: @eachEvent.Date.GetValueOrDefault().ToShortTimeString() </p>
                                    <a class="btn btn-success" href="events/edit/@eachEvent.Id">Düzenle</a>
                                    <button class="btn btn-danger" @onclick="@(() => Delete(eachEvent.Id))">Sil</button>]
                                </div>
                            </div>
                        </div>
                    </div>
                </tr>

                <tr>
                    <td>
                        @eachEvent.Title  <br />
                        @eachEvent.Location  <br />
                        @eachEvent.Date.GetValueOrDefault().ToLongDateString()
                        @eachEvent.Date.GetValueOrDefault().ToShortTimeString()
                    </td>
                    <td>
                        <a class="btn btn-success" href="groups/edit/@eachEvent.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(eachEvent.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    List<Events> events { get; set; }
    protected override async Task OnInitializedAsync()
    {
        events = await eventDAL.GetEvents();
    }
    async Task Delete(int eventID)
    {
        eventDAL.DeleteEvents(eventID);
    }
}