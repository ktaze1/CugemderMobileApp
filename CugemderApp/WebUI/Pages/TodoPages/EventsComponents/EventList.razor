@page "/events"
@page "/events/{id:int}"
@inject EventsDAL eventDAL
@inject AspNetUsersDAL userDAL
@inject GroupsDAL groupDAL
@inject NotificationsDAL notifications
@inject AuthenticationStateProvider AuthenticationStateProvider



@if (loggedUser != null)
{
    @if (loggedUser.IsAdmin.Value.Equals(true))
    {

<div>
    <h4>Yeni Etkinlik Ekle: <span @onclick="@( () => isOpen = !isOpen)" class="oi oi-@arrowPosition()"></span></h4>
    @if (isOpen)
    {
        <div class="simple-form col-sm-3">
            <EditForm Model="newEvent" OnValidSubmit="CreateEvent">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Başlık</label>
                    <InputText @bind-Value="newEvent.Title" class="form-control" placeholder="Başlık Giriniz" />
                    <ValidationMessage For="@(() => newEvent.Title)" />
                </div>
                <div class="form-group">
                    <label>Lokasyon</label>
                    <InputText @bind-Value="newEvent.Location" class="form-control" placeholder="Adres Giriniz" />
                    <ValidationMessage For="@(() => newEvent.Location)" />
                </div>
                <div class="form-group">
                    <label>Açıklama</label>
                    <InputTextArea @bind-Value="newEvent.Summary" class="form-control" placeholder="Açıklama Giriniz" />
                    <ValidationMessage For="@(() => newEvent.Summary)" />
                </div>
                <div class="form-group">
                    <label for="createdDate">Tarih ve Saat</label>
                    <InputDateTime class="form-control" @bind-Value="newEvent.Date" />
                    <ValidationMessage For="@(() => newEvent.Date)" />
                </div>
                <div class="form-group">
                    <label>Grup</label>
                    @if (groupList != null)
                    {
                        <select class="form-control"
                                @bind="newEvent.RelatedGroup">
                            <option value="0">Seç</option>
                            @foreach (var group in groupList)
                            {
                                @if (group.Id == groupId)
                                {
                                    <option selected value="@group.Id">@group.GroupName</option>
                                }
                                else
                                {
                                    <option value="@group.Id">@group.GroupName</option>
                                }

                            }
                        </select>
                    }
                </div>

                <button type="submit" class="btn btn-dark">Ekle</button>
            </EditForm>
        </div>
    }
</div>
    }
}


<br>
@if (events == null)
{
    <p> Yukleniyor</p>
}
else if (events.Count == 0)
{
    <p>Kayıt Bulunamadı</p>
}
else
{
    <br />
    <table class="table table-striped">
        <tbody>
            <h2>Etkinlikler</h2>
            @try
            {
                @foreach (Events eachEvent in loggedUser.IsAdmin.Value.Equals(true) ? events.Where(c => c.Date.GetValueOrDefault() > DateTime.Now).Take(10) : events.Where(c => c.Date.GetValueOrDefault() > DateTime.Now && (c.RelatedGroup == loggedUser.Group || c.RelatedGroup == null)).Take(10))
                {
                    <tr>
                        <td>
                            <p style="color: red"> <b>Başlık</b>: <span style="color: black;"> @eachEvent.Title </span></p>
                            <p style="color: red"> <b>Lokasyon</b>: <span style="color: black;"> @eachEvent.Location </span></p>
                            <p style="color: red"> <b>Tarih</b>: <span style="color: black;"> @eachEvent.Date.GetValueOrDefault().ToLongDateString() </span></p>
                            <p style="color: red"> <b>Saat</b>: <span style="color: black;"> @eachEvent.Date.GetValueOrDefault().ToShortTimeString() </span></p>
                            <p style="color: red"> <b>Açıklama</b>: <span style="color: black;"> @eachEvent.Summary </span></p>
                            @if (eachEvent.RelatedGroupNavigation != null)
                            {<p style="color: red"> <b>Grup</b>: @eachEvent.RelatedGroupNavigation.GroupName</p>}
                            @if (loggedUser.IsAdmin.Value.Equals(true))
                            {
                                <a class="btn btn-success" href="events/edit/@eachEvent.Id">Düzenle</a>
                                <button class="btn btn-danger" @onclick="@(() => Delete(eachEvent.Id))">Sil</button>
                            }
                        </td>
                    </tr>
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message);
            }
            <br />
            <h2>Geçmiş Etkinlikler</h2>
            <br />
            @try
            {
                @foreach (Events eachEvent in loggedUser.IsAdmin.Value.Equals(true) ? events.Where(c => c.Date.GetValueOrDefault() < DateTime.Now).Take(20) : events.Where(c => c.Date.GetValueOrDefault() < DateTime.Now && (c.RelatedGroup == loggedUser.Group || c.RelatedGroup == null)).Take(20))
                {
                    <tr>
                        <td>
                            <p style="color: red"> <b>Başlık</b>: <span style="color: black;"> @eachEvent.Title </span></p>
                            <p style="color: red"> <b>Lokasyon</b>: <span style="color: black;"> @eachEvent.Location </span></p>
                            <p style="color: red"> <b>Tarih</b>: <span style="color: black;"> @eachEvent.Date.GetValueOrDefault().ToLongDateString() </span></p>
                            <p style="color: red"> <b>Saat</b>: <span style="color: black;"> @eachEvent.Date.GetValueOrDefault().ToShortTimeString() </span></p>
                            <p style="color: red"> <b>Açıklama</b>: <span style="color: black;"> @eachEvent.Summary </span></p>
                            @if (eachEvent.RelatedGroupNavigation != null)
                            {<p style="color: red"> <b>Grup</b>: @eachEvent.RelatedGroupNavigation.GroupName</p>}
                            @if (loggedUser.IsAdmin.Value.Equals(true))
                            {
                                <a class="btn btn-success" href="events/edit/@eachEvent.Id">Düzenle</a>
                                <button class="btn btn-danger" @onclick="@(() => Delete(eachEvent.Id))">Sil</button>
                            }
                        </td>
                    </tr>
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message);
            }
        </tbody>
    </table>
}

@code {
    private AspNetUsers loggedUser;
    private string _userId;
    List<Groups> groupList;
    public int groupId = 0;
    [Parameter] public int id { get; set; }
    bool isOpen = false;

    Events newEvent = new Events();
    List<Events> events { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            loggedUser = await userDAL.GetUsername(user.Identity.Name);
            events = await eventDAL.GetEvents();
            groupList = await groupDAL.GetGroupsAsync();
        }
    }

    async Task Delete(int eventID)
    {
        eventDAL.DeleteEvents(eventID);
        notifications.DeleteNotification(eventID);
    }

    void CreateEvent()
    {
        if (newEvent.RelatedGroup == null)
        {
            newEvent.RelatedGroup = null;
            foreach (var item in groupList)
            {
                notifications.SendNotification($"{newEvent.Date.Value.ToLongDateString()} Tarihinde Etkinlik olacaktır", "Yeni Etkinlik!", item.GroupName);
                notifications.AddNotificaiton(new Notifications()
                {
                    Title = "Etkinlik",
                    Body = $"Bugün olacak etkinliğin saati: {newEvent.Date.Value.ToShortTimeString()} ",
                    Time = newEvent.Date.Value,
                    Receiver = item.GroupName
                });
            }
        }
        else if (newEvent.RelatedGroup != 0)
        {
            notifications.SendNotification($"{newEvent.Date.Value.ToLongDateString()} Tarihinde Etkinlik olacaktır", "Yeni Etkinlik!", groupList.Where(c => c.Id == newEvent.RelatedGroup).First().GroupName);
            notifications.AddNotificaiton(new Notifications()
            {
                Title = "Etkinlik",
                Body = $"Bugün olacak etkinliğin saati: {newEvent.Date.Value.ToShortTimeString()} ",
                Time = newEvent.Date.Value,
                Receiver = groupList.Where(c => c.Id == newEvent.RelatedGroup).First().GroupName
            });
        }

        eventDAL.PostEvents(newEvent);
        newEvent = new Events();
    }

    string arrowPosition()
    {
        if (!isOpen)
            return "arrow-thick-bottom";
        return "arrow-thick-top";
    }
}