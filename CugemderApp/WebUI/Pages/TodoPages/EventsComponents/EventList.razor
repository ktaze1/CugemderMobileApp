@page "/events/{id:int}"
@page "/events/"
@inject EventsDAL eventDAL
@inject AspNetUsersDAL userDAL
@inject AuthenticationStateProvider AuthenticationStateProvider
 

<h3>Etkinlikler</h3>

<br>
@if (events == null)
{
    <text>Loading...</text>
}
else if (events.Count == 0)
{
    <text>Etkinlik bulunamadi</text>
}
else
{
    <table class="table table-striped">
        <tbody>
            <h2>Etkinlikler</h2>
            @foreach (Events eachEvent in id == 1 ? events.Where(c => c.Date.GetValueOrDefault() > DateTime.Now) : events.Where(c => c.Date.GetValueOrDefault() > DateTime.Now && c.RelatedGroup == loggedUser.Group || c.RelatedGroup == null))
            {
                <tr>
                    <td>
                        <p> <b>Başlık</b>: @eachEvent.Title </p>
                        <p> <b>Lokasyon</b>: @eachEvent.Location </p>
                        <p> <b>Tarih</b>: @eachEvent.Date.GetValueOrDefault().ToLongDateString() </p>
                        <p> <b>Saat</b>: @eachEvent.Date.GetValueOrDefault().ToShortTimeString() </p>
                        <p> <b>Hakkında</b>: @eachEvent.Summary </p>
                        @if (eachEvent.RelatedGroupNavigation != null)
                        {<p> <b>Grup</b>: @eachEvent.RelatedGroupNavigation.GroupName</p>}
                        @if (id == 1)
                        {
                            <a class="btn btn-success" href="events/edit/@eachEvent.Id">Düzenle</a>
                            <button class="btn btn-danger" @onclick="@(() => Delete(eachEvent.Id))">Delete</button>
                        }
                    </td>
                </tr>
            }
            <br />
            <h2>Geçmiş Etkinlikler</h2>
            <br />
            @foreach (Events eachEvent in id == 1 ? events.Where(c => c.Date.GetValueOrDefault() < DateTime.Now) : events.Where(c => c.Date.GetValueOrDefault() < DateTime.Now && c.RelatedGroup == loggedUser.Group || c.RelatedGroup == null))
            {
                <tr>
                    <td>
                        <p> <b>Başlık</b>: @eachEvent.Title </p>
                        <p> <b>Lokasyon</b>: @eachEvent.Location </p>
                        <p> <b>Tarih</b>: @eachEvent.Date.GetValueOrDefault().ToLongDateString() </p>
                        <p> <b>Saat</b>: @eachEvent.Date.GetValueOrDefault().ToShortTimeString() </p>
                        <p> <b>Hakkında</b>: @eachEvent.Summary </p>
                        @if (eachEvent.RelatedGroupNavigation != null)
                        {<p> <b>Grup</b>: @eachEvent.RelatedGroupNavigation.GroupName</p>}
                        @if (id == 1)
                        {
                            <a class="btn btn-success" href="events/edit/@eachEvent.Id">Düzenle</a>
                            <button class="btn btn-danger" @onclick="@(() => Delete(eachEvent.Id))">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public int id { get; set; }

    private AspNetUsers loggedUser;
    private string _userId;




    List<Events> events { get; set; }
    protected override async Task OnInitializedAsync()
    {
        events = await eventDAL.GetEvents();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            loggedUser = await userDAL.GetUserID(user.Identity.Name);
        }
    }
    async Task Delete(int eventID)
    {
        eventDAL.DeleteEvents(eventID);
    }
}