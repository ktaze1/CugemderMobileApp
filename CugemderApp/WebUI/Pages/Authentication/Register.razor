@page "/register"
@layout AuthLayout
@inject NavigationManager navigationManager
@inject CugemderApp.Security.CustomStateProvider authStateProvider
@inject FileUpload fileDAL
@inject AspNetUsersDAL userDAL
@inject IJSRuntime js

@using System.ComponentModel.DataAnnotations;

<h1 class="h2 font-weight-normal login-title">
    Üye Ol
</h1>

<EditForm class="form-signin" OnValidSubmit="ValidateRequest" Model="registerRequest">
    <DataAnnotationsValidator />

    <label for="inputFirstName">Adınız:</label>
    <InputText id="inputFirstName" class="form-control" placeholder="Adınız" autofocus @bind-Value="@registerRequest.FirstName" />
    <ValidationMessage For="@(() => registerRequest.FirstName)" />
    <br />
    <label for="inputLastName">Soyadınız:</label>
    <InputText id="inputLastName" class="form-control" placeholder="Soyadınız" autofocus @bind-Value="@registerRequest.LastName" />
    <ValidationMessage For="@(() => registerRequest.LastName)" />
    <br />
    <label for="inputMail">E-mail:</label>
    <InputText id="inputMail" class="form-control" placeholder="E-mail" autofocus @bind-Value="@registerRequest.Email" />
    <ValidationMessage For="@(() => registerRequest.Email)" />
    <br />
    @*<label for="inputdob">Doğum Tarihi:</label>
        <InputDate id="inputdob" class="form-control" autofocus @bind-Value="@registerRequest.DateofBirth" />
        <br />*@
    <label for="inputPhone">Telefon:</label>
    <InputText id="inputPhone" class="form-control" placeholder="Başta 0 ile giriniz: 05551112233" autofocus @bind-Value="@registerRequest.PhoneNo" />
    <ValidationMessage For="@(() => registerRequest.PhoneNo)" />
    <br />
    <label for="inputPassword">Şifre:</label>
    <InputText type="password" id="inputPassword" class="form-control" placeholder="Şifreniz" @bind-Value="@registerRequest.Password" />
    <ValidationMessage For="@(() => registerRequest.Password)" />
    <br />
    <label for="inputPasswordConfirm">Şifre Onay:</label>
    <InputText type="password" id="inputPasswordConfirm" class="form-control" placeholder="Şifre Onay" @bind-Value="@registerRequest.PasswordConfirm" />
    <ValidationMessage For="@(() => registerRequest.PasswordConfirm)" />
    <br />
    <label>Profil Fotoğrafı:</label>
    <button class="btn btn-primary" type="button" @onclick="@SelectFiles">Fotoğraf Seç</button>
    <br />

    <br />
    <button class="btn btn-lg btn-dark btn-block" type="submit">Üye Ol</button>
    <br />
    <label class="text-danger">@error</label>
    <NavLink href="login">
        <h6 class="font-weight-normal text-center">Zaten üye misiniz? Buradan giriş yapın.</h6>
    </NavLink>
</EditForm>

<br />
<center>

    <img src="_content/CugemderApp/beeport.png" style="height: 300px; width: 300px;" />
</center>
@code{

    RegisterRequestValidation registerRequest { get; set; } = new RegisterRequestValidation() { DateofBirth = new DateTime(DateTime.Today.Year, 01, 01) };
    RegisterRequest validatedRegisterRequest = new RegisterRequest();
    string error { get; set; }

    FileResult pickResult;

    async Task OnSubmit()
    {
        error = null;
        try
        {
            if (pickResult == null)
            {
                await js.InvokeVoidAsync("swal", "Fotoğraf Ekleyin!", "Lütfen Fotoğraf ekleyiniz.", "error");
            }
            else if (pickResult != null)
            {
                var name = registerRequest.FirstName + " " + registerRequest.LastName;
                UploadFiles();
                await authStateProvider.Register(validatedRegisterRequest);
                //await authStateProvider.SendNewUserEmail(name);
                await js.InvokeVoidAsync("swal", "Üyelik Kaydı Başarılı", "Sistem Yöneticisi tarafından onaylanması sonrasında programı kullanabileceksiniz.", "info");
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    async void SelectFiles()
    {
        pickResult = await FilePicker.PickAsync(new PickOptions
        {
            FileTypes = FilePickerFileType.Images
        });
    }

    async void UploadFiles()
    {
        System.IO.FileInfo fi = new System.IO.FileInfo(pickResult.FileName);
        string encodedStr = string.Format(@"{0}", Guid.NewGuid());
        var filename = $"{encodedStr}{fi.Extension}";
        var stream = await pickResult.OpenReadAsync();
        var content = new StreamContent(stream);
        var multi = new MultipartFormDataContent();
        multi.Add(content, filename, filename);
        fileDAL.UploadPhoto(multi);
        validatedRegisterRequest.photoUrl = $"{AppState._http.BaseAddress.ToString()}StaticFiles/Images/{filename}";
    }

    async void ValidateRequest()
    {
        validatedRegisterRequest.FirstName = registerRequest.FirstName.Trim();
        validatedRegisterRequest.LastName = registerRequest.LastName.Trim();
        validatedRegisterRequest.Email = registerRequest.Email.Trim();
        validatedRegisterRequest.PhoneNo = registerRequest.PhoneNo.Trim();
        validatedRegisterRequest.Password = registerRequest.Password;
        validatedRegisterRequest.PasswordConfirm = registerRequest.PasswordConfirm;
        validatedRegisterRequest.photoUrl = registerRequest.photoUrl;
        await OnSubmit();
    }


    public class RegisterRequestValidation
    {
        [Required(ErrorMessage = "Bu alan boş bırakılamaz.")]
        public string FirstName { get; set; }


        [Required(ErrorMessage = "Bu alan boş bırakılamaz.")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Bu alan boş bırakılamaz.")]
        [RegularExpression(@"05\d{9}\s*$", ErrorMessage = "Geçerli bir telefon numarası giriniz")]
        public string PhoneNo { get; set; }

        [Required(ErrorMessage = "Bu alan boş bırakılamaz.")]
        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:dd/MM/yyyy}")]
        public DateTime DateofBirth { get; set; }


        [EmailAddress]
        [Required(ErrorMessage = "Bu alan boş bırakılamaz.")]
        public string Email { get; set; }

        public string photoUrl { get; set; }

        [Required(ErrorMessage = "Bu alan boş bırakılamaz.")]
        [StringLength(100, ErrorMessage = "{0} en az {2} ve en fazla {1} karakter uzunluğunda; en az bir büyük, bir küçük ve bir adet özel karakter içermeli.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Şifre")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Bu alan boş bırakılamaz.")]
        [Compare(nameof(Password), ErrorMessage = "Şifreler uyuşmuyor!")]
        public string PasswordConfirm { get; set; }
    }

}